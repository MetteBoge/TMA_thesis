---
title: "xena_data_analysis"
format: html
editor: visual
---

## Determine operations

```{r}
write_cibersort_decon_solidtumor <- FALSE
write_cibersort_decon_skcm <- FALSE
```

## Load packages and targets

```{r}
library(tidyverse)
library(R.utils)

#install.packages("C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/code_space/immunedeconv-master/immunedeconv-master/", repos = NULL, type = "source")

library(immunedeconv)
library(tidyverse)
library(biomaRt)
library(knitr)
library(patchwork)

set_cibersort_binary("C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/code_space/CIBERSORT.R")
set_cibersort_mat("C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/code_space/CIBERSORT_package/LM22.txt")
```

```{r}
target_list <- c("CD274", "PDCD1LG2", "IDO1", "TDO2", "ARG1", "ARG2", "TGFB1", "CCL22", "CCL2", "LGALS3","LRRC32", "IL10", "SIGLEC15", "BIRC7")
cancer_abbr_list <- c("LAML", "CHOL", "CESC", "DLBC", "HNSC", "BRCA", "PAAD", "SKCM", "LUAD", "LUSC")

```

## Download data

```{r}
# Cohort:
cohort = "TCGA_PANCAN"
file_path <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/Xena/"
dir.create(file_path, showWarnings = FALSE, recursive = TRUE)
```

```{r}
## Data
data_type = "gene_expression_RNAseq_tpm"

# Specify the URL of the file you want to download
url <- "https://toil-xena-hub.s3.us-east-1.amazonaws.com/download/tcga_RSEM_gene_tpm.gz"

# Specify the file name and location where you want to save the file on your computer
file_name_data <- paste0(cohort, "_", data_type)

options(timeout=1000)
if (!(file.exists(paste(file_path, file_name_data, ".tsv.gz", sep = "")) | 
        file.exists(paste(file_path, file_name_data, ".tsv", sep = "")))){
  # Call the download.file() function, passing in the URL and file name/location as arguments
  download.file(url, paste(file_path, file_name_data, ".tsv.gz", sep = ""), mode = "wb")
}

if (!(file.exists(paste(file_path, file_name_data, ".tsv", sep = "")))){
  gunzip(paste(file_path, file_name_data, ".tsv.gz", sep = ""))
}
```

```{r}
## sampleType_primaryDisease
data_type = "sampleType_primaryDisease"

# Specify the URL of the file you want to download
url <- "https://tcga-pancan-atlas-hub.s3.us-east-1.amazonaws.com/download/TCGA_phenotype_denseDataOnlyDownload.tsv.gz"

# Specify the file name and location where you want to save the file on your computer
file_name_pheno1 <- paste0(cohort, "_", data_type)

# Call the download.file() function, passing in the URL and file name/location as arguments
if (!(file.exists(paste(file_path, file_name_pheno1, ".tsv.gz", sep = "")) | 
        file.exists(paste(file_path, file_name_pheno1, ".tsv", sep = "")))){
  download.file(url, paste(file_path, file_name_pheno1, ".tsv", sep = ""), mode = "wb")
}
if (!(file.exists(paste(file_path, file_name_pheno1, ".tsv", sep = "")))){
  gunzip(paste(file_path, file_name_pheno1, ".tsv.gz", sep = ""))
}
```

```{r}
## curated_clinical_data
data_type = "curated_clinical_data"

# Specify the URL of the file you want to download
url <- "https://tcga-pancan-atlas-hub.s3.us-east-1.amazonaws.com/download/Survival_SupplementalTable_S1_20171025_xena_sp"

# Specify the file name and location where you want to save the file on your computer
file_name_pheno2 <- paste0(cohort, "_", data_type)

# Call the download.file() function, passing in the URL and file name/location as arguments
if (!(file.exists(paste(file_path, file_name_pheno2, ".tsv.gz", sep = "")) | 
        file.exists(paste(file_path, file_name_pheno2, ".tsv", sep = "")))){
  download.file(url, paste(file_path, file_name_pheno2, ".tsv", sep = ""), mode = "wb")
}
if (!(file.exists(paste(file_path, file_name_pheno2, ".tsv", sep = "")))){
  gunzip(paste(file_path, file_name_pheno2, ".tsv.gz", sep = ""))
}
```

```{r}
df_st_pd <- read.csv(paste(file_path, file_name_pheno1, ".tsv", sep = ""),sep = "\t")
df_clin_pd <- read.csv(paste(file_path, file_name_pheno2, ".tsv", sep = ""),sep = "\t")

df_pheno <- df_clin_pd %>% 
  full_join(df_st_pd, by = "sample")

```

### Subset and wrangle data

```{r}
geneName_ensg <- read_csv("C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/targets_ensg.csv")
geneName_ensg <- geneName_ensg %>% 
  rename(gene_ensg_shrt = converted_alias) %>% 
  dplyr::select(name, gene_ensg_shrt)
geneName_ensg
```

```{r}
sample_id_solidtumor <- list()
sample_id_laml_skcm <- list()

for (c_type in cancer_abbr_list){
   df_pheno_c_type <- df_pheno %>% 
    filter(cancer.type.abbreviation == c_type)
   
   # Filter sample ids to only include those of tumor tissue. For LAML: only PBMC. 
   # For Melanoma, both metastatic and tumor. 
   if (c_type == "LAML"){
     sample_id_laml_skcm[[c_type]] <- df_pheno_c_type %>% 
       filter(sample_type == "Primary Blood Derived Cancer - Peripheral Blood") %>%
       dplyr::select(sample)
     
   } else if(c_type == "SKCM"){
     sample_id_laml_skcm[["SKCM_tumor"]] <- df_pheno_c_type %>% 
       filter(sample_type == "Primary Tumor") %>%
       dplyr::select(sample)
     
     sample_id_laml_skcm[["SKCM_metastatic"]] <- df_pheno_c_type %>% 
       filter(sample_type == "Metastatic") %>%
       dplyr::select(sample)
     
   } else {
     sample_id_solidtumor[[c_type]] <- df_pheno_c_type %>% 
       filter(sample_type == "Primary Tumor") %>%
       dplyr::select(sample) 
   }
}
```

```{r}
# Write new tsv to load as df_data:
new_file_name <- paste0(file_path, "TCGA_PANCAN_gene_expression_RNAseq_tpm_subset_cancertypes.tsv")

if (!(file.exists(new_file_name))){
    
  all_samples_of_interest <- intersect(
    c(unlist(sample_id_solidtumor, use.names = FALSE),
    unlist(sample_id_laml_skcm, use.names = FALSE)),
    colnames(df_data))
  
  df_data %>% 
    dplyr::select(sample, all_of(all_samples_of_interest)) %>% 
    mutate(gene_ensg_shrt = gsub("\\..*", "", sample)) %>% 
    write_tsv(new_file_name)
}
  
# Load data: 
if (!exists("df_data")){
  df_data <- read.csv(new_file_name, sep = "\t")
}
```

```{r}
# Change format of colnames to have "-" instead of ".":
colnames(df_data) <- gsub("\\.", "-", colnames(df_data))

flat_sample_id_solidtumor <- intersect(list(unlist(flatten(sample_id_solidtumor), use.names = FALSE))[[1]], colnames(df_data))

df_solidtumor <- df_data %>% 
  dplyr::select(sample, all_of(flat_sample_id_solidtumor)) %>% 
  mutate(gene_ensg_shrt = gsub("\\..*", "", sample)) %>% 
  relocate(sample, gene_ensg_shrt)


df_skcm <- list()

for (skcm_type in names(sample_id_laml_skcm[-1])){
  
  flat_sample_id_skcm <- intersect(unlist(sample_id_laml_skcm[[skcm_type]], use.names = FALSE), colnames(df_data))
  
  df_skcm[[skcm_type]] <- df_data %>% 
    dplyr::select(sample, all_of(flat_sample_id_skcm)) %>% 
    mutate(gene_ensg_shrt = gsub("\\..*", "", sample)) %>% 
    relocate(sample, gene_ensg_shrt)
}

# Add gene name for target genes and remove the rest
#df_solidtumor_2 <- df_solidtumor %>% 
#  mutate(gene_ensg_shrt = gsub("\\..*", "", sample)) %>% 
#  full_join(geneName_ensg, by="gene_ensg_shrt") %>% 
#  relocate(sample, gene_ensg_shrt, name) %>% 
#  filter(!(is.na(name)))
```

## Adjust for cell type

### Cibersort

```{r}
#dependencies
library(e1071)
library(parallel)
library(preprocessCore)

#Core algorithm
CoreAlg <- function(X, y){
    
    #try different values of nu
    svn_itor <- 3
    
    res <- function(i){
        if(i==1){nus <- 0.25}
        if(i==2){nus <- 0.5}
        if(i==3){nus <- 0.75}
        model<-svm(X,y,type="nu-regression",kernel="linear",nu=nus,scale=F)
        model
    }

    if(Sys.info()['sysname'] == 'Windows') out <- mclapply(1:svn_itor, res, mc.cores=1) else
    out <- mclapply(1:svn_itor, res, mc.cores=svn_itor)
    
    nusvm <- rep(0,svn_itor)
    corrv <- rep(0,svn_itor)
    
    #do cibersort
    t <- 1
    while(t <= svn_itor) {
        weights = t(out[[t]]$coefs) %*% out[[t]]$SV
        weights[which(weights<0)]<-0
        w<-weights/sum(weights)
        u <- sweep(X,MARGIN=2,w,'*')
        k <- apply(u, 1, sum)
        nusvm[t] <- sqrt((mean((k - y)^2)))
        corrv[t] <- cor(k, y)
        t <- t + 1
    }
    
    #pick best model
    rmses <- nusvm
    mn <- which.min(rmses)
    model <- out[[mn]]
    
    #get and normalize coefficients
    q <- t(model$coefs) %*% model$SV
    q[which(q<0)]<-0
    w <- (q/sum(q))
    
    mix_rmse <- rmses[mn]
    mix_r <- corrv[mn]

    newList <- list("w" = w, "mix_rmse" = mix_rmse, "mix_r" = mix_r)

}

#do permutations
doPerm <- function(perm, X, Y){
    itor <- 1
    Ylist <- as.list(data.matrix(Y))
    dist <- matrix()
    
    while(itor <= perm){
        #print(itor)
        
        #random mixture
        yr <- as.numeric(Ylist[sample(length(Ylist),dim(X)[1])])

        #standardize mixture
        yr <- (yr - mean(yr)) / sd(yr)

        #run CIBERSORT core algorithm
        result <- CoreAlg(X, yr)
        
        mix_r <- result$mix_r
        
        #store correlation
        if(itor == 1) {dist <- mix_r}
        else {dist <- rbind(dist, mix_r)}
        
        itor <- itor + 1
    }
    newList <- list("dist" = dist)
}

#main function
CIBERSORT <- function(sig_matrix, mixture_matrix, perm=0, QN=TRUE, file_dest, in_c_type){
    
    #read in data
    X <- read.table(sig_matrix,header=T,sep="\t",row.names=1,check.names=F)
    #Y <- read.table(mixture_file, header=T, sep="\t", row.names=1,check.names=F)

    X <- data.matrix(X)
    Y <- mixture_matrix #data.matrix(Y)

    P <- perm #number of permutations
    
    #anti-log if max < 50 in mixture file
    if(max(Y) < 50) {Y <- 2^Y}
    
    #quantile normalization of mixture file
    if(QN == TRUE){
        tmpc <- colnames(Y)
        tmpr <- rownames(Y)
        Y <- normalize.quantiles(Y)
        colnames(Y) <- tmpc
        rownames(Y) <- tmpr
    }

    #intersect genes
    Xgns <- row.names(X)
    Ygns <- row.names(Y)
    YintX <- Ygns %in% Xgns
    Y <- Y[YintX,]
    XintY <- Xgns %in% row.names(Y)
    X <- X[XintY,]

    #standardize sig matrix
    X <- (X - mean(X)) / sd(as.vector(X))
    
    #empirical null distribution of correlation coefficients
    if(P > 0) {nulldist <- sort(doPerm(P, X, Y)$dist)}
    
    #print(nulldist)

    header <- c('Mixture',colnames(X),"P-value","Correlation","RMSE")
    #print(header)

    output <- matrix()
    itor <- 1
    mixtures <- dim(Y)[2]
    pval <- 9999

    #iterate through mixtures
    while(itor <= mixtures){
        
        y <- Y[,itor]
        
        #standardize mixture
        y <- (y - mean(y)) / sd(y)

        #run SVR core algorithm
        result <- CoreAlg(X, y)
        
        #get results
        w <- result$w
        mix_r <- result$mix_r
        mix_rmse <- result$mix_rmse

        #calculate p-value
        if(P > 0) {pval <- 1 - (which.min(abs(nulldist - mix_r)) / length(nulldist))}

        #print output
        out <- c(colnames(Y)[itor],w,pval,mix_r,mix_rmse)
        if(itor == 1) {output <- out}
        else {output <- rbind(output, out)}
        
        itor <- itor + 1
        
    }
    
    #save results
    write.table(rbind(header,output), file=paste0(file_dest, "/CIBERSORT-Results_", in_c_type, ".txt"), sep="\t", row.names=F, col.names=F, quote=F)
    
    #return matrix object containing all results
    obj <- rbind(header,output)
    obj <- obj[,-1]
    obj <- obj[-1,]
    obj <- matrix(as.numeric(unlist(obj)),nrow=nrow(obj))
    rownames(obj) <- colnames(Y)
    colnames(obj) <- c(colnames(X),"P-value","Correlation","RMSE")
    obj
}
```

```{r}
# Change ENSG to gene names: 
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
genes <- df_solidtumor$gene_ensg_shrt

G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","hgnc_symbol"),values=genes,mart= mart)

# Add gene names and remove duplicates
df_solidtumor <- df_solidtumor %>% 
  left_join(G_list, by = c("gene_ensg_shrt"="ensembl_gene_id")) %>% 
  relocate(sample, gene_ensg_shrt, hgnc_symbol) %>% 
  filter(!(is.na(hgnc_symbol)) & nchar(hgnc_symbol) > 0) %>% 
  distinct(hgnc_symbol, .keep_all = TRUE) # Keep only ONE of duplicated genes 


# Empty list to save matrices: 
gExp_mat_skcm <- list()
gExp_mat_skcm_logval <- list()

# Remove duplicates (median) for melanoma data: 
for (skcm_type in names(df_skcm)){
  duplicates <- df_skcm[[skcm_type]] %>% 
    left_join(G_list, by = c("gene_ensg_shrt"="ensembl_gene_id")) %>% 
    filter(!(is.na(hgnc_symbol)) & nchar(hgnc_symbol) > 0) %>% 
    relocate(sample, gene_ensg_shrt, hgnc_symbol) %>% 
    group_by(hgnc_symbol) %>% 
    filter(n()>1) %>% arrange(hgnc_symbol) %>% 
    summarize(
      # Taking the first entry of the useless_info columns (since they vary but are not aggregated)
      sample = first(sample),
      gene_ensg_shrt = first(gene_ensg_shrt),
      # Calculating the median for all sample columns, assuming their names start with 'sample'
      across(starts_with("TCGA"), median)
    ) 
  
  not_duplicated <- df_skcm[[skcm_type]] %>% 
    left_join(G_list, by = c("gene_ensg_shrt"="ensembl_gene_id")) %>% 
    filter(!(is.na(hgnc_symbol)) & nchar(hgnc_symbol) > 0) %>% 
    relocate(sample, gene_ensg_shrt, hgnc_symbol) %>% 
    group_by(hgnc_symbol) %>% 
    filter(n()==1) %>% arrange(hgnc_symbol) 
    
    
  df_skcm[[skcm_type]] <- bind_rows(duplicates, not_duplicated)
  
  gExp_mat_skcm[[skcm_type]] <- df_skcm[[skcm_type]] %>% 
    mutate(across(-c(sample, gene_ensg_shrt, hgnc_symbol), function(x) 2^x)) %>% 
    dplyr::select(-c("sample", "gene_ensg_shrt")) %>% 
    column_to_rownames(var = "hgnc_symbol") %>% 
    as.matrix() 

  gExp_mat_skcm_logval[[skcm_type]] <- df_skcm[[skcm_type]] %>% 
    dplyr::select(-c("sample", "gene_ensg_shrt")) %>% 
    column_to_rownames(var = "hgnc_symbol") %>% 
    as.matrix() 
}


```

Use ESTIMATE to compute a score for tumoral, immune and stromal components and the fraction of tumor purity.

Use quantiseq to determine cell compostition for each sample.

```{r}
# Change from log to positive numeric values. Required to run cibersort:
# Make gene expression matrix: 
gExp_mat_solidtumor <- df_solidtumor %>% 
  mutate(across(-c(sample, gene_ensg_shrt, hgnc_symbol), function(x) 2^x)) %>% 
  dplyr::select(-c("sample", "gene_ensg_shrt")) %>% 
  column_to_rownames(var = "hgnc_symbol") %>% 
  as.matrix() 

# Save matrix where I keep log values (standard from data): 
gExp_mat_solidtumor_logval <- df_solidtumor %>% 
  dplyr::select(-c("sample", "gene_ensg_shrt")) %>% 
  column_to_rownames(var = "hgnc_symbol") %>% 
  as.matrix() 


```

```{r}
# Estimate purity of sample. How much is stromal, immune and tumor from sample. 
estimate_solidtumor <- deconvolute_estimate(gExp_mat_solidtumor)
```

```{r}
if (write_cibersort_decon_solidtumor) {
  
  lm_22_filepath <- 'C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/code_space/CIBERSORT_package/LM22.txt'

  solidtumors <- cancer_abbr_list[!(cancer_abbr_list %in% c("LAML", "SKCM"))]
  
  file_dest <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/Xena/cibersort_decon"
  
  decon_solidtumor_cibersort <- list()
  
  for (c_type in solidtumors){
    print(c_type)
    
    sample_ids <- intersect(colnames(gExp_mat_solidtumor), unlist(sample_id_solidtumor[[c_type]], use.names = FALSE))
    
    gExp_ctype <- gExp_mat_solidtumor[,sample_ids]
    
    decon_solidtumor_cibersort[[c_type]] <- CIBERSORT(lm_22_filepath, gExp_ctype, 0, TRUE, file_dest, c_type)

  }
}


# For melanoma
if (write_cibersort_decon_skcm) {
  
  lm_22_filepath <- 'C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/code_space/CIBERSORT_package/LM22.txt'

  file_dest <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/Xena/cibersort_decon"
  
  decon_skcm_cibersort <- list()
  
  for (skcm_type in names(gExp_mat_skcm)){
    print(skcm_type)
    
    decon_skcm_cibersort <- list()
    
    gExp_ctype <- gExp_mat_skcm[[skcm_type]]
    
    decon_skcm_cibersort[[skcm_type]] <- CIBERSORT(lm_22_filepath, gExp_ctype, 0, TRUE, file_dest, skcm_type)

  }
}

```

```{r}
# Read the cibersort results from files: 
if (!exists("decon_solidtumor_cibersort")){
  decon_solidtumor_cibersort <- list()
  
  solidtumors <- cancer_abbr_list[!(cancer_abbr_list %in% c("LAML", "SKCM"))]
  
  file_dest <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/Xena/cibersort_decon"
  
  for (c_type in solidtumors){
    print(c_type)
    
    decon_solidtumor_cibersort[[c_type]] <- read_tsv(paste0(file_dest, "/CIBERSORT-Results_", c_type, ".txt"), show_col_types = FALSE)

  }
}


# Read the cibersort results from files: 
if (!exists("decon_skcm_cibersort")){
  decon_skcm_cibersort <- list()
  
  file_dest <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/Xena/cibersort_decon"
  
  for (skcm_type in names(gExp_mat_skcm)){
    print(skcm_type)
    
    decon_skcm_cibersort[[skcm_type]] <- read_tsv(paste0(file_dest, "/CIBERSORT-Results_", skcm_type, ".txt"), show_col_types = FALSE)

  }
}
```

### Adjust with linear regression

```{r}
# Define a function to perform regression and predict gene expression for all genes
adjust_cell_type_lm <- function(gene_expr_df, deconvolution, targets) {
  # Ensure deconvolution is a data frame and extract relevant data
  deconvolution <- as_tibble(deconvolution)
  cell_types <- deconvolution$cell_type
  deconvolution_samples <- deconvolution %>% 
    dplyr::select(-cell_type)  # Remove the cell types column

  gene_expr_df <- gene_expr_df[rownames(gene_expr_df) %in% targets,]
  
  # Create an empty matrix to store predictions
  predicted_matrix <- matrix(nrow = nrow(gene_expr_df), ncol = ncol(gene_expr_df))
  rownames(predicted_matrix) <- rownames(gene_expr_df)
  colnames(predicted_matrix) <- colnames(gene_expr_df)
  
  # Iterate over each gene
  for (gene in rownames(gene_expr_df)) {
    # Extract gene expression values for the gene of interest
    gene_expression <- as.numeric(gene_expr_df[gene, ])
    
    # Check if the length of gene_expression matches the number of columns in deconvolution_samples
    if (length(gene_expression) == ncol(deconvolution_samples)) {
      # Perform linear regression
      model <- lm(gene_expression ~ t(deconvolution_samples))
      
      # Predict gene expression
      predicted_expression <- predict(model, newdata = as.data.frame(t(deconvolution_samples)))
      
      # Store predictions in the matrix
      predicted_matrix[gene, ] <- predicted_expression
    } else {
      warning(paste("Length of gene expression vector does not match number of columns in Deconvolution for gene:", gene))
    }
  }
  
  # Put gene names as column and return as tibble
  predicted_matrix <- cbind(rownames(predicted_matrix), predicted_matrix)
  colnames(predicted_matrix)[1] <- "genes"
  
  out_df <- as_tibble(predicted_matrix) %>% 
    mutate(across(-genes, as.numeric))
  
  return(out_df)
}
```

```{r}
# Adjust gene expression using deconvolution from cibersort: 
adjusted_geneExp_solidtumor_cibersort <- list()

for (c_type in solidtumors){
  
  deconvolution_samples <- decon_solidtumor_cibersort[[c_type]] %>% 
    dplyr::select(-Mixture) %>% 
    data.matrix()
  
  sample_ids <- intersect(colnames(gExp_mat_solidtumor_logval), 
                          unlist(sample_id_solidtumor[[c_type]], 
                                 use.names = FALSE))
  gene_expr_df <- gExp_mat_solidtumor_logval[,sample_ids]
  
  gene_expr_df <- gene_expr_df[rownames(gene_expr_df) %in% target_list,]
  
  # Create an empty matrix to store predictions
  predicted_matrix <- matrix(nrow = nrow(gene_expr_df), ncol = ncol(gene_expr_df))
  rownames(predicted_matrix) <- rownames(gene_expr_df)
  colnames(predicted_matrix) <- colnames(gene_expr_df)
  
  
  # Iterate over each gene
  for (gene in rownames(gene_expr_df)) {
    # Extract gene expression values for the gene of interest
    gene_expression <- as.numeric(gene_expr_df[gene, ])
    
    # Check if the length of gene_expression matches the number of columns in deconvolution_samples
    if (length(gene_expression) == nrow(deconvolution_samples)) {
      # Perform linear regression
      model <- lm(gene_expression ~ deconvolution_samples)
      
      # Predict gene expression
      predicted_expression <- predict(model, newdata = as.data.frame(deconvolution_samples))
      
      # Store predictions in the matrix
      predicted_matrix[gene, ] <- predicted_expression
      
  
        
    } else {
      warning(paste("Length of gene expression vector does not match number of columns in Deconvolution for gene:", gene))
    }
  }
  
  adjusted_geneExp_solidtumor_cibersort[[c_type]] <- predicted_matrix
    
  # Write file
  as_tibble(predicted_matrix) %>% 
    mutate(genes = rownames(predicted_matrix)) %>% 
    relocate(genes) %>% 
    write_tsv(file=paste0(file_dest, "/CIBERSORT-Adjusted_gene_expression_log2_", c_type, ".tsv"))
  
}




# Adjust gene expression using deconvolution from cibersort: 
adjusted_geneExp_skcm_cibersort <- list()

for (skcm_type in names(gExp_mat_skcm_logval)){
  
  deconvolution_samples <- decon_skcm_cibersort[[skcm_type]] %>% 
    dplyr::select(-Mixture) %>% 
    data.matrix()
  
  gene_expr_df <- gExp_mat_skcm_logval[[skcm_type]]
  
  gene_expr_df <- gene_expr_df[rownames(gene_expr_df) %in% target_list,]
  
  # Create an empty matrix to store predictions
  predicted_matrix <- matrix(nrow = nrow(gene_expr_df), ncol = ncol(gene_expr_df))
  rownames(predicted_matrix) <- rownames(gene_expr_df)
  colnames(predicted_matrix) <- colnames(gene_expr_df)
  
  
  # Iterate over each gene
  for (gene in rownames(gene_expr_df)) {
    # Extract gene expression values for the gene of interest
    gene_expression <- as.numeric(gene_expr_df[gene, ])
    
    # Check if the length of gene_expression matches the number of columns in deconvolution_samples
    if (length(gene_expression) == nrow(deconvolution_samples)) {
      # Perform linear regression
      model <- lm(gene_expression ~ deconvolution_samples)
      
      # Predict gene expression
      predicted_expression <- predict(model, newdata = as.data.frame(deconvolution_samples))
      
      # Store predictions in the matrix
      predicted_matrix[gene, ] <- predicted_expression
        
    } else {
      warning(paste("Length of gene expression vector does not match number of columns in Deconvolution for gene:", gene))
    }
  }
  
  adjusted_geneExp_skcm_cibersort[[skcm_type]] <- predicted_matrix
    
  # Write file
  as_tibble(predicted_matrix) %>% 
    mutate(genes = rownames(predicted_matrix)) %>% 
    relocate(genes) %>% 
    write_tsv(file=paste0(file_dest, "/CIBERSORT-Adjusted_gene_expression_log2_", skcm_type, ".tsv"))
  
}

```

```{r}
as.data.frame(adjusted_geneExp_solidtumor_cibersort[["PAAD"]]) %>% 
  rownames_to_column("genes") %>% 
  pivot_longer(cols = -c(genes),
               values_to = "gene_exp",
               names_to = "samples") %>% 
  ggplot(aes(x=gene_exp, y=genes)) +
  geom_boxplot(fill = "lightsteelblue4", alpha = 0.5) +
  labs(title = "Original gene expression",
       x = "log2(tpm+0.001)",
       y = "") + 
  geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
  theme_classic() +
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
    plot.caption = element_text(face = "italic"),
    axis.text.x = element_text(size = 16),
    axis.text.y = element_text(size = 16))
```

### Plots and tables

```{r}
# Boxplot of estimates
estimate_PAAD |>
  rownames_to_column(var = "estimates") |>
  pivot_longer(cols = -estimates,
               names_to = "sample",
               values_to = "scores") |>
  ggplot(aes(x=estimates, y=scores)) + 
  geom_boxplot() 
```

```{r}
# Plot cell compostition

quantiseq_PAAD %>%
  gather(sample, fraction, -cell_type) %>%
  ggplot(aes(x=cell_type, y=fraction)) + 
  geom_boxplot() +
  labs(
    title = "Pancreatic Adenocarcinoma",
    subtitle = "Distribution of cell populations",
    caption = "Source: Xena Browser, TCGA PANCAN",
    x = "Cell types",
    y = "Fraction"
  ) +
  theme(
    plot.title = element_text(color = "#0099f8", size = 16, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
    plot.caption = element_text(face = "italic"),
    axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
ylim_val = c(-11,11)

# Plot gene expression before and after adjusting for cell composition
ori_geneexp_bp <- df_PAAD %>% 
  dplyr::select(-c("sample", "gene_ensg_shrt")) %>% 
  rename(genes=hgnc_symbol) %>% 
  filter(genes %in% target_list) %>% 
  pivot_longer(cols= -genes,
               names_to = "sample",
               values_to = "exp") %>% 
  ggplot(aes(x=genes, y=exp)) + 
  geom_boxplot() +
  geom_hline(aes(yintercept = 0), color = "red", linetype=2) +
  labs(
    title = "Pancreatic Adenocarcinoma",
    subtitle = "Original gene expression",
    caption = "Source: Xena Browser, TCGA PANCAN",
    x = "Genes",
    y = "Fraction"
  ) +
  theme(
    plot.title = element_text(color = "#0099f8", size = 16, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
    plot.caption = element_text(face = "italic"),
    axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(limits = ylim_val)

adj_geneexp_bp <- adj_PAAD %>% 
  pivot_longer(cols= -genes,
               names_to = "sample",
               values_to = "exp") %>% 
  mutate(exp = as.numeric(exp)) %>% 
  ggplot(aes(x=genes, y=exp)) + 
  geom_boxplot() +
  geom_hline(aes(yintercept = 0), color = "red", linetype=2) +
  labs(
    title = "Pancreatic Adenocarcinoma",
    subtitle = "Adjusted to cell type composition",
    caption = "Source: Xena Browser, TCGA PANCAN",
    x = "Genes",
    y = "Fraction"
  ) +
  theme(
    plot.title = element_text(color = "#0099f8", size = 16, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
    plot.caption = element_text(face = "italic"),
    axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(limits = ylim_val)

ori_geneexp_bp + adj_geneexp_bp
```

```{r}
# Take sample type into account. Primary tumor vs Normal tissue, etc.
ylim_val = c(-11,11)

adj_geneexp_tumor_bp <- adj_PAAD_tumor %>% 
  pivot_longer(cols= -genes,
               names_to = "sample",
               values_to = "exp") %>% 
  mutate(exp = as.numeric(exp)) %>% 
  ggplot(aes(x=genes, y=exp)) + 
  geom_boxplot() +
  geom_hline(aes(yintercept = 0), color = "red", linetype=2) +
  labs(
    title = "Pancreatic Adenocarcinoma",
    subtitle = "Primary Tumor",
    caption = "Source: Xena Browser, TCGA PANCAN",
    x = "Genes",
    y = "Fraction"
  ) +
  theme(
    plot.title = element_text(color = "#0099f8", size = 16, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
    plot.caption = element_text(face = "italic"),
    axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(limits = ylim_val)

adj_geneexp_normal_bp <- adj_PAAD_normal %>% 
  pivot_longer(cols= -genes,
               names_to = "sample",
               values_to = "exp") %>% 
  mutate(exp = as.numeric(exp)) %>% 
  ggplot(aes(x=genes, y=exp)) + 
  geom_boxplot() +
  geom_hline(aes(yintercept = 0), color = "red", linetype=2) +
  labs(
    title = "Pancreatic Adenocarcinoma",
    subtitle = "Solid Normal Tissue",
    caption = "Source: Xena Browser, TCGA PANCAN",
    x = "Genes",
    y = "Fraction"
  ) +
  theme(
    plot.title = element_text(color = "#0099f8", size = 16, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
    plot.caption = element_text(face = "italic"),
    axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(limits = ylim_val)

adj_geneexp_tumor_bp + adj_geneexp_normal_bp
```

```{r}
df_PAAD
```

## Phenotypic relations, cancer specific

Take gene_exp data used from before and load in the phenotype data for the studies. Load survival data as well.

One study at a time, look at gene expression of targets and correlation to phenotypes.

```{r}
# Merge gene exp data with phenotype data
df_pheno_PAAD <- df_pheno %>% 
  dplyr::filter(cancer.type.abbreviation == "PAAD" &
           sample %in% colnames(adj_PAAD)) %>% 
  dplyr::select_if(~!(all(is.na(.)) | all(. == ""))) %>% # Remove empty columns 
  mutate(survival = ifelse(cause_of_death == "Pancreatic Cancer", "dead", "alive"),
         ajcc_pathologic_tumor_stage = ifelse(grepl("Stage", ajcc_pathologic_tumor_stage), ajcc_pathologic_tumor_stage, NaN))

# Join data and make factors for later plotting and statistical analysis
df_data_pheno_PAAD <- adj_PAAD_tumor %>% 
  pivot_longer(cols=-genes,
               names_to = "sample", 
               values_to = "exp") %>% 
  dplyr::full_join(df_pheno_PAAD, by = "sample") %>% 
  mutate(histological_grade = factor(histological_grade, 
                                      levels = c("GX", "G1", "G2", "G3", "G4"), 
                                      ordered= TRUE),
         treatment_outcome_first_course = factor(treatment_outcome_first_course,
                                                 levels=c("Complete Remission/Response", 
                                                          "Partial Remission/Response",
                                                          "Stable Disease", 
                                                          "Progressive Disease"),
                                                 ordered=TRUE))
  

```

### Plots

#### Boxplots

```{r}
# Survival (cancer being cause of death)
df_data_pheno_PAAD %>% 
  dplyr::select(genes, sample, exp, survival) %>% 
  ggplot(aes(x=genes, y=exp, fill=survival)) + 
  geom_boxplot() +
  geom_hline(aes(yintercept = 0), color = "red", linetype=2) +
  labs(
    title = "Pancreatic Adenocarcinoma",
    subtitle = "Comparing alive vs dead (cancer being cause)",
    caption = "Source: Xena Browser, TCGA PANCAN",
    x = "Genes",
    y = "Fraction"
  ) +
  theme(
    plot.title = element_text(color = "#0099f8", size = 16, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
    plot.caption = element_text(face = "italic"),
    axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
n_df <- df_data_pheno_PAAD %>% 
  distinct(sample, .keep_all = TRUE) %>% # Keep only ONE of duplicated samplenames
  filter(histological_grade != "GX") %>%  
  group_by(histological_grade) %>% 
  summarize(n=n())

# Looking at relation to histological grade
df_data_pheno_PAAD %>% 
 # filter(genes == "SIGLEC15") %>% 
  filter(histological_grade != "GX") %>% 
  left_join(n_df, by="histological_grade") %>%
  mutate(histological_grade = paste0(histological_grade, " (n=", n, ")")) %>%
  dplyr::select(genes, sample, exp, histological_grade) %>% 
  ggplot(aes(x=genes, y=exp, fill=histological_grade)) + 
  geom_boxplot() +
  geom_hline(aes(yintercept = 0), color = "red", linetype=2) +
  labs(
    title = "Pancreatic Adenocarcinoma",
    subtitle = "",
    caption = "Source: Xena Browser, TCGA PANCAN",
    x = "Genes",
    y = "Fraction"
  ) +
  theme(
    plot.title = element_text(color = "#0099f8", size = 16, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
    plot.caption = element_text(face = "italic"),
    axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
n_df <- df_data_pheno_PAAD %>% 
  distinct(sample, .keep_all = TRUE) %>% # Keep only ONE of duplicated samplenames
  filter((grepl("Disease|Remission", treatment_outcome_first_course))) %>% 
  group_by(treatment_outcome_first_course) %>% 
  summarize(n=n())

df_data_pheno_PAAD %>% 
  filter((grepl("Disease|Remission", treatment_outcome_first_course))) %>% 
  left_join(n_df, by="treatment_outcome_first_course") %>% 
  mutate(treatment_outcome_first_course = paste0(treatment_outcome_first_course, " (n=", n, ")")) %>% 
  dplyr::select(genes, sample, exp, treatment_outcome_first_course) %>% 
  ggplot(aes(x=genes, y=exp, fill=treatment_outcome_first_course)) + 
  geom_boxplot() +
  geom_hline(aes(yintercept = 0), color = "red", linetype=2) +
  labs(
    title = "Pancreatic Adenocarcinoma",
    subtitle = "",
    caption = "Source: Xena Browser, TCGA PANCAN",
    x = "Genes",
    y = "Fraction"
  ) +
  theme(
    plot.title = element_text(color = "#0099f8", size = 16, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
    plot.caption = element_text(face = "italic"),
    axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
n_df <- df_data_pheno_PAAD %>% 
  distinct(sample, .keep_all = TRUE) %>% # Keep only ONE of duplicated samplenames
  filter(!(grepl("Unknown|Not", race))) %>% 
  group_by(race) %>% 
  summarize(n=n())

df_data_pheno_PAAD %>% 
  filter(!(grepl("Unknown|Not", race))) %>% 
  left_join(n_df, by="race") %>% 
  mutate(race = paste0(race, " (n=", n, ")")) %>% 
  dplyr::select(genes, sample, exp, race) %>%
  ggplot(aes(x=genes, y=exp, fill=race)) + 
  geom_boxplot() +
  geom_hline(aes(yintercept = 0), color = "red", linetype=2) +
  labs(
    title = "Pancreatic Adenocarcinoma",
    subtitle = "",
    caption = "Source: Xena Browser, TCGA PANCAN",
    x = "Genes",
    y = "Fraction"
  ) +
  theme(
    plot.title = element_text(color = "#0099f8", size = 16, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
    plot.caption = element_text(face = "italic"),
    axis.text.x = element_text(angle = 45, hjust = 1)) 
```

```{r}
n_df <- df_data_pheno_PAAD %>% 
  distinct(sample, .keep_all = TRUE) %>% # Keep only ONE of duplicated samplenames
  group_by(gender) %>% 
  summarize(n=n())

df_data_pheno_PAAD %>% 
  left_join(n_df, by="gender") %>% 
  mutate(gender = paste0(gender, " (n=", n, ")")) %>% 
  dplyr::select(genes, sample, exp, gender) %>%
  ggplot(aes(x=genes, y=exp, fill=gender)) + 
  geom_boxplot() +
  geom_hline(aes(yintercept = 0), color = "red", linetype=2) +
  labs(
    title = "Pancreatic Adenocarcinoma",
    subtitle = "",
    caption = "Source: Xena Browser, TCGA PANCAN",
    x = "Genes",
    y = "Fraction"
  ) +
  theme(
    plot.title = element_text(color = "#0099f8", size = 16, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
    plot.caption = element_text(face = "italic"),
    axis.text.x = element_text(angle = 45, hjust = 1)) 
```

#### Linear regression

```{r}
gene_of_interes <- "IDO1"

df_data_pheno_PAAD %>% 
  filter(genes == gene_of_interes) %>% 
  ggplot(aes(x=age_at_initial_pathologic_diagnosis, 
             y=exp)) +
  geom_point() +
  geom_smooth(method="lm", se = TRUE)

df_data_pheno_PAAD %>% 
  filter(genes == gene_of_interes) %>% 
  lm(exp ~ age_at_initial_pathologic_diagnosis, .) %>% 
  summary()
```

```{r}
gene_of_interes <- "SIGLEC15"

df_data_pheno_PAAD %>% 
  filter(genes == gene_of_interes) %>% 
  ggplot(aes(x=DSS.time, 
             y=exp)) +
  geom_point() +
  geom_smooth(method="lm", se = TRUE)

df_data_pheno_PAAD %>% 
  filter(genes == gene_of_interes) %>% 
  lm(exp ~ DSS.time, .) %>% 
  summary()
```

```{r}
gene_of_interest <- "ARG2"

df_data_pheno_PAAD %>% 
  filter(genes == gene_of_interest) %>% 
  ggplot(aes(x=PFI.time, 
             y=exp)) +
  geom_point() +
  geom_smooth(method="lm", se = TRUE)

df_data_pheno_PAAD %>% 
  filter(genes == gene_of_interest) %>% 
  lm(exp ~ PFI.time, .) %>% 
  summary()
```

#### Kaplan-Meier estimator

```{r}
library(survival)
library(survminer)
```

```{r}
gene_of_interest <- "SIGLEC15" #"PDCD1LG2"

surv_df <- df_data_pheno_PAAD %>% 
  dplyr::filter(genes == gene_of_interest) %>% 
  mutate(gene_regulation = ifelse(exp>0, "upregulated", "downregulated")) %>% 
  dplyr::select(OS, OS.time, gene_regulation)

km_fit <- survfit(Surv(OS.time, OS) ~ gene_regulation, data = surv_df)

ggsurvplot(km_fit, data=surv_df, risk.table = FALSE, conf.int = TRUE)
```

```{r}
# Kaplan-Meier. Instead of using up- or downregulated, use exp over or under mean

gene_of_interest <- "TGFB1" #"PDCD1LG2"

surv_df <- df_data_pheno_PAAD %>% 
  dplyr::filter(genes == gene_of_interest) %>% 
  mutate(gene_regulation = ifelse(exp>mean(exp), "above_avg", "below_avg")) %>% 
  dplyr::select(OS, OS.time, gene_regulation)

km_fit <- survfit(Surv(OS.time, OS) ~ gene_regulation, data = surv_df)

ggsurvplot(km_fit, data=surv_df, risk.table = FALSE, conf.int = TRUE)
```

### Statistical test

```{r}
colnames(df_data_pheno_PAAD)
```

```{r}
df_data_pheno_PAAD %>% 
  t.test(exp ~ gender, .)

# Categorical with more than 2 categories: ANOVA
df_data_pheno_PAAD %>% 
  filter(genes == "SIGLEC15") %>% 
  aov(exp ~ histological_grade, .) %>% 
  summary()


df_data_pheno_PAAD %>% 
  filter((grepl("Disease|Remission", treatment_outcome_first_course))) %>% 
  filter(genes == "IDO1") %>% 
  aov(exp ~ treatment_outcome_first_course, .) %>% 
  summary()
```

```{r}
# Continous phenotype
df_data_pheno_PAAD_geneSepc <- df_data_pheno_PAAD %>% 
  filter(genes == "SIGLEC15")
cor.test(df_data_pheno_PAAD_geneSepc$exp,
         df_data_pheno_PAAD_geneSepc$age_at_initial_pathologic_diagnosis, 
         method="pearson")

df_data_pheno_PAAD_geneSepc <- df_data_pheno_PAAD %>% 
  filter(genes == "ARG2")
cor.test(df_data_pheno_PAAD_geneSepc$exp,
         df_data_pheno_PAAD_geneSepc$PFI.time, 
         method="pearson")
```
