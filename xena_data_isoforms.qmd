---
title: "xena_data_isoforms"
format: html
editor: visual
---

## Load packages and targets

```{r}
library(tidyverse)
library(R.utils)
library(arrow)
library(biomaRt)
```

```{r}
target_list <- c("CD274", "PDCD1LG2", "IDO1", "TDO2", "ARG1", "ARG2", "TGFB1", "CCL22", "CCL2", "LGALS3","LRRC32", "IL10", "SIGLEC15", "BIRC7")

cancer_abbr_list <- c("LAML", "CHOL", "CESC", "DLBC", "HNSC", "BRCA", "PAAD", "SKCM", "LUAD", "LUSC")

```

## Download data

```{r}
# Cohort:
cohort = "TCGA_PANCAN"
file_path <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/Xena/"
dir.create(file_path, showWarnings = FALSE, recursive = TRUE)
```

```{r}
## Data
data_type = "transcript_expression_RNAseq_RSEM_tpm"

# Specify the URL of the file you want to download
url <- "https://toil-xena-hub.s3.us-east-1.amazonaws.com/download/tcga_rsem_isoform_tpm.gz"

# Specify the file name and location where you want to save the file on your computer
file_name_data <- paste0(cohort, "_", data_type)

options(timeout=1000)
if (!(file.exists(paste(file_path, file_name_data, ".tsv.gz", sep = "")) | 
        file.exists(paste(file_path, file_name_data, ".tsv", sep = "")))){
  # Call the download.file() function, passing in the URL and file name/location as arguments
  download.file(url, paste(file_path, file_name_data, ".tsv.gz", sep = ""), mode = "wb")
}

if (!(file.exists(paste(file_path, file_name_data, ".tsv", sep = "")))){
  gunzip(paste(file_path, file_name_data, ".tsv.gz", sep = ""))
}
```

```{r}
## Data 2
data_type = "transcript_expression_RNAseq_kallisto_tpm"

# Specify the URL of the file you want to download
url <- "https://toil-xena-hub.s3.us-east-1.amazonaws.com/download/tcga_Kallisto_tpm.gz"

# Specify the file name and location where you want to save the file on your computer
file_name_data <- paste0(cohort, "_", data_type)

options(timeout=10000)
if (!(file.exists(paste(file_path, file_name_data, ".tsv.gz", sep = "")) | 
        file.exists(paste(file_path, file_name_data, ".tsv", sep = "")))){
  # Call the download.file() function, passing in the URL and file name/location as arguments
  download.file(url, paste(file_path, file_name_data, ".tsv.gz", sep = ""), mode = "wb")
}

if (!(file.exists(paste(file_path, file_name_data, ".tsv", sep = "")))){
  gunzip(paste(file_path, file_name_data, ".tsv.gz", sep = ""))
}
```

```{r}
## sampleType_primaryDisease
data_type = "sampleType_primaryDisease"

# Specify the URL of the file you want to download
url <- "https://tcga-pancan-atlas-hub.s3.us-east-1.amazonaws.com/download/TCGA_phenotype_denseDataOnlyDownload.tsv.gz"

# Specify the file name and location where you want to save the file on your computer
file_name_pheno1 <- paste0(cohort, "_", data_type)

# Call the download.file() function, passing in the URL and file name/location as arguments
if (!(file.exists(paste(file_path, file_name_pheno1, ".tsv.gz", sep = "")) | 
        file.exists(paste(file_path, file_name_pheno1, ".tsv", sep = "")))){
  download.file(url, paste(file_path, file_name_pheno1, ".tsv", sep = ""), mode = "wb")
}
if (!(file.exists(paste(file_path, file_name_pheno1, ".tsv", sep = "")))){
  gunzip(paste(file_path, file_name_pheno1, ".tsv.gz", sep = ""))
}
```

```{r}
## curated_clinical_data
data_type = "curated_clinical_data"

# Specify the URL of the file you want to download
url <- "https://tcga-pancan-atlas-hub.s3.us-east-1.amazonaws.com/download/Survival_SupplementalTable_S1_20171025_xena_sp"

# Specify the file name and location where you want to save the file on your computer
file_name_pheno2 <- paste0(cohort, "_", data_type)

# Call the download.file() function, passing in the URL and file name/location as arguments
if (!(file.exists(paste(file_path, file_name_pheno2, ".tsv.gz", sep = "")) | 
        file.exists(paste(file_path, file_name_pheno2, ".tsv", sep = "")))){
  download.file(url, paste(file_path, file_name_pheno2, ".tsv", sep = ""), mode = "wb")
}
if (!(file.exists(paste(file_path, file_name_pheno2, ".tsv", sep = "")))){
  gunzip(paste(file_path, file_name_pheno2, ".tsv.gz", sep = ""))
}
```

### Read phenotype data

```{r}
df_st_pd <- read.csv(paste(file_path, file_name_pheno1, ".tsv", sep = ""),sep = "\t") 
df_clin_pd <- read.csv(paste(file_path, file_name_pheno2, ".tsv", sep = ""),sep = "\t")  

df_pheno <- df_clin_pd %>%    
  full_join(df_st_pd, by = "sample")  
```

```{r}

sample_id_df <- list()

for (c_type in cancer_abbr_list){
   df_pheno_c_type <- df_pheno %>% 
    filter(cancer.type.abbreviation == c_type)
   
   # Filter sample ids to only include those of tumor tissue. For LAML: only PBMC. 
   # For Melanoma, both metastatic and tumor. 
   if (c_type == "LAML"){
     sample_id_df[[c_type]] <- df_pheno_c_type %>% 
       filter(sample_type == "Primary Blood Derived Cancer - Peripheral Blood") %>%
       dplyr::select(sample)
     
   } else if(c_type == "SKCM"){
     sample_id_df[["SKCM_tumor"]] <- df_pheno_c_type %>% 
       filter(sample_type == "Primary Tumor") %>%
       dplyr::select(sample)
     
     sample_id_df[["SKCM_metastatic"]] <- df_pheno_c_type %>% 
       filter(sample_type == "Metastatic") %>%
       dplyr::select(sample)
     
   } else {
     sample_id_df[[c_type]] <- df_pheno_c_type %>% 
       filter(sample_type == "Primary Tumor") %>%
       dplyr::select(sample) 
   }
}

```

```{r}
# List of patients with more than one sample. Options to compare gene expression in same individual but from different tissue (e.g. tumor vs normal tissue same patient) 
#pat_morethan1sample <- df_pheno %>%    
#  group_by(X_PATIENT) %>%    
#  summarise(n=n()) %>%   
#  filter(n>1 & n < 200) %>%    
#  dplyr::select(X_PATIENT) %>%    
#  unlist(use.names = F)  
#df_pheno %>%  
#  filter(X_PATIENT %in% pat_morethan1sample)
```

### Read transcript data

```{r}
# Read for each cancer type (data made in python jupyter notebook)

transcript_data <- list()

for (c_type in cancer_abbr_list){
  df_tmp <- read.csv(paste0(file_path, "TCGA_PANCAN_transcript_expression_RNAseq_RSEM_tpm_", c_type, ".tsv"), sep="\t") 

  colnames(df_tmp) <- gsub("\\.", "-", colnames(df_tmp))

  if (c_type == "SKCM"){
    sample_ids_tmp <- intersect(colnames(df_tmp), unlist(rbind(sample_id_df[["SKCM_metastatic"]], sample_id_df[["SKCM_tumor"]])))
  } else {
    sample_ids_tmp <- intersect(colnames(df_tmp), unlist(sample_id_df[[c_type]]))
  }
  
  transcript_data[[c_type]] <- df_tmp %>% 
    mutate(gene_id_b = gsub("\\-.*", "", gene_id)) %>% 
    dplyr::select(transcript_id, gene_id, gene_id_b, sample_ids_tmp)

}

```

```{r}
transcript_data[["SKCM"]]
```

## Adjust to gene exp data (adjusted)

## Plot

### Heatmap

```{r}
c_type <- "SKCM"
gene_of_interest <- "ARG1"

transcript_data[[c_type]] %>% 
  pivot_longer(cols=-c("gene_id", "gene_id_b", "transcript_id"),
               names_to = "sample") %>% 
  ggplot(aes(sample, transcript_id, fill=value)) + 
  geom_tile() + 
  facet_grid(gene_id_b~., scales="free_y") +
  theme(
  #  axis.text.y = element_blank(), 
    axis.text.x = element_blank()
  ) + 
  labs(
    title = element_text(paste0("Transcript expression in ", c_type))
  )


# Which are not coding. 
# What transcript contain the target sequence (sent by email)

```

## Investigate the transcripts

```{r}

transcript_info_filepath <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/transcripts_all.tsv"

if (!(file.exists(transcript_info_filepath))){
  df_transcripts <- tibble()
  
  for (gene in target_list){
    df_transcripts <- bind_rows(df_transcripts, read_csv(paste0("C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/transcripts_", gene, ".csv"), show_col_types = FALSE))  
  }

  write_tsv(df_transcripts, transcript_info_filepath)
}


# Remove version numbers from the transcript ID. 
transcript_info <- read_tsv(transcript_info_filepath, show_col_types = FALSE) %>% 
  mutate(`Transcript ID` = gsub("\\..*", "", `Transcript ID`)) %>% 
  rename(transcript_id = `Transcript ID`) %>% 
  arrange(Name)

transcript_info_protein <- transcript_info %>% 
  dplyr::select(transcript_id, Protein)

transcript_info_protein %>% View()
```

```{r}
transcript_data_ctype <- transcript_data[[c_type]] %>% 
  left_join(transcript_info_protein, by="transcript_id") %>% 
  relocate(transcript_id, gene_id, gene_id_b, Protein)

transcript_data_ctype %>% 
  rename(transcript_name = gene_id) %>% 
  dplyr::select(-c(transcript_id)) %>% 
  pivot_longer(cols = -c(transcript_name, gene_id_b, Protein), 
               values_to = "trans_exp",
               names_to = "samples") %>% 
  ggplot(aes(x = gene_id_b, y=trans_exp, fill=transcript_name)) +
  geom_col()
```

```{r}

```

```{r}
transcript_id_list <- transcript_data[[c_type]] %>% 
  dplyr::select(gene_id) %>% 
  unique() %>% 
  unlist(use.names = FALSE)

df_transcripts <- tibble()
```

```{r}
tmp <- transcript_data[[c_type]] %>% 
  dplyr::select(transcript_id) %>% 
  unique() %>% unlist(use.names = FALSE)
```

```{r}
trans_tmp <- c('ENST00000512584.5',
 'ENST00000553493.5',
 'ENST00000381573.8',
 'ENST00000407242.6',
 'ENST00000469293.1',
 'ENST00000404995.5',
 'ENST00000553755.5',
 'ENST00000556322.1',
 'ENST00000521480.1',
 'ENST00000498260.1',
 'ENST00000522495.5',
 'ENST00000275196.5',
 'ENST00000356962.2',
 'ENST00000518804.5',
 'ENST00000342412.10',
 'ENST00000522840.1',
 'ENST00000557319.1',
 'ENST00000503634.5',
 'ENST00000556491.1',
 'ENST00000421973.1',
 'ENST00000556438.6',
 'ENST00000546268.5',
 'ENST00000484820.1',
 'ENST00000498261.1',
 'ENST00000556263.1',
 'ENST00000225831.4',
 'ENST00000523779.1',
 'ENST00000507590.5',
 'ENST00000260061.9',
 'ENST00000506181.5',
 'ENST00000597453.1',
 'ENST00000602118.6',
 'ENST00000506072.5',
 'ENST00000519154.5',
 'ENST00000474218.1',
 'ENST00000587418.2',
 'ENST00000598758.5',
 'ENST00000423557.1',
 'ENST00000557120.5',
 'ENST00000554715.1',
 'ENST00000492923.1',
 'ENST00000510293.1',
 'ENST00000464145.1',
 'ENST00000253513.11',
 'ENST00000521636.1',
 'ENST00000593178.2',
 'ENST00000395306.1',
 'ENST00000509738.1')
```

```{r}
setdiff(gsub("\\..*","",trans_tmp), tmp)
setdiff(tmp,gsub("\\..*","",trans_tmp))

```

Figure out how naming convention is with transcripts. Is there another place where I can find the rest of the transcripts (I find only 48 if I keep .X extension).
