---
title: "xena_data_gene_enrichment_analysis_2"
format: html
editor: visual
---

```{r}
rm(list = ls())
set.seed(123)  # Use any consistent value
```

## Load libraries and data

```{r}
library(tidyverse)
library(GSVA)
library(GSEABase)
library(SummarizedExperiment)
#library(Hmisc) # rcorr
#library(reticulate) #using python
library(msigdbr)
#library(clusterProfiler) Use ssgsea instead
library(enrichplot)
library(kableExtra)
library(Cairo)
library(rmarkdown)
library(webshot2) # save_kable
#library(ggridges)
packageVersion("msigdbr")
```

```{r}
target_list <- c("CD274", "PDCD1LG2", "IDO1", "TDO2", "ARG1", "ARG2", "TGFB1", "CCL22", "CCL2", "LGALS3","LRRC32", "IL10", "SIGLEC15", "BIRC7")
cancer_abbr_list <- c("LAML", "CHOL", "CESC", "DLBC", "HNSC", "BRCA", "PAAD", "SKCM_metastatic", "SKCM_tumor", "LUAD", "LUSC")

file_path_xenadata <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/Xena/"
path_save_plots <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Plots/GSEA_plots/"
file_path_data <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/"
```

## Compare results across cancer types

```{r}
# Loop cancer types and save the gsea_results in a list...

ssgsea_results_ctype <- list()

for (c_type in cancer_abbr_list){
  R_element_name_2 <- paste0(file_path_xenadata, 
                             'GSEA_Rdata/gsea_results_ssgsea_', 
                             c_type, '.RData')
  
  if (!file.exists(R_element_name_2)){
    warning(paste("No gsea results exist for ", c_type))
    
  } else {
    ssgsea_results_ctype[[c_type]] <- readRDS(R_element_name_2) %>% 
      assay() %>% 
      as.data.frame() %>% 
      rownames_to_column("BP") %>% 
      mutate(cancer_type = c_type)
  }
}

ssgsea_results_all <- ssgsea_results_ctype %>% 
  bind_rows()
```

## PAAD (cold) vs SKCM (warm)

```{r}
# All results for each of the two cancer types:
ssgsea_results_skcm_t <- ssgsea_results_all %>% 
  filter(cancer_type == "SKCM_tumor")

ssgsea_results_paad <- ssgsea_results_all %>% 
  filter(cancer_type == "PAAD")

# Define how many BP to include per gene: 
top_n <- 10

gene_x <- target_list[1]

skcm_t_top_corr <- list()
paad_top_corr <- list()
skcm_paad_summary <- list()

for (gene_x in target_list){
  ssgsea_results_skcm_t_genex <- ssgsea_results_skcm_t %>% 
    dplyr::select(c(BP, all_of(gene_x), cancer_type))
  
  colnames(ssgsea_results_skcm_t_genex)[2] <- "ES"
  
  skcm_t_top_corr[[gene_x]] <- ssgsea_results_skcm_t_genex %>% 
    filter(ES > 0) %>% 
    arrange(desc(ES)) %>% 
    mutate(BP = gsub("GOBP_", "", BP),
          gene = gene_x) %>% 
    head(top_n) 
  
  
  ## PAAD: 
  ssgsea_results_paad_genex <- ssgsea_results_paad %>% 
    dplyr::select(c(BP, all_of(gene_x), cancer_type))
  
  colnames(ssgsea_results_paad_genex)[2] <- "ES"
  
  paad_top_corr[[gene_x]] <- ssgsea_results_paad_genex %>% 
    filter(ES > 0) %>% 
    arrange(desc(ES)) %>% 
    mutate(BP = gsub("GOBP_", "", BP),
          gene = gene_x) %>% 
    head(top_n)
  
  # Collect in a summary: 
  skcm_paad_summary[[gene_x]] <- paad_top_corr[[gene_x]] %>% 
    dplyr::select(gene) %>% 
    mutate(SKCM_t = skcm_t_top_corr[[gene_x]]$BP,
           PAAD = paad_top_corr[[gene_x]]$BP,
           in_common_paad = FALSE) %>% 
    arrange(SKCM_t, PAAD)
     
  top_n_in_common <- intersect(paad_top_corr[[gene_x]]$BP,
                               skcm_t_top_corr[[gene_x]]$BP)
  
  if(length(top_n_in_common) > 0){
    print(paste(gene_x, "has BP in common for the two cancer types"))
    
    skcm_paad_summary[[gene_x]] <- skcm_paad_summary[[gene_x]] %>% 
      mutate(in_common_paad = ifelse(PAAD %in% top_n_in_common, TRUE, FALSE))
  }
  
}

paad_top_corr_full <- paad_top_corr %>% 
  bind_rows()

skcm_t_top_corr_full <- skcm_t_top_corr %>% 
  bind_rows() 

both_top_corr_full <- paad_top_corr_full %>% 
  rbind(paad_top_corr_full)

skcm_paad_summary_full <- skcm_paad_summary %>% 
  bind_rows()

both_top_corr_full
```

```{r}
uniq_BP <- skcm_paad_summary_full %>% 
  filter(in_common_paad == FALSE)

in_common_BP <- skcm_paad_summary_full %>% 
  filter(in_common_paad == TRUE) %>% 
  dplyr::select(gene, PAAD) %>% 
  dplyr::rename(BP = PAAD)

uniq_BP
in_common_BP 
```

### Heatmap

```{r}
skcm_t_top_corr_full %>% 
  ggplot(aes(x=gene, y=BP, fill=ES)) +
  geom_tile()

```

# OLD: Summarize across cancer types

```{r}
# All positive correlations. Subset all the BPs in common. If more than 20, then subset these on highest mean ES across cancer types top 20.

#ssgsea_gene <- list()
ssgsea_gene_filtered <- list()
ssgsea_gene_rest <- list()

for (gene_x in target_list){
  
  # Select only one gene column
  ssgsea_gene <- ssgsea_results_all %>% 
    dplyr::select(BP, all_of(gene_x), cancer_type)
  
  colnames(ssgsea_gene)[2] <- "ES"
  
  ssgsea_gene_filtered[[gene_x]] <- ssgsea_gene %>% 
    filter(ES > 0) %>% 
    group_by(BP) %>% 
    filter(n_distinct(cancer_type) == length(ssgsea_results_ctype)) %>%
    summarize(mean_ES = mean(ES, na.rm = TRUE), .groups = "drop") %>% 
    arrange(desc(mean_ES)) %>% 
    mutate(BP = gsub("GOBP_", "", BP),
           gene = gene_x) %>% 
    head(20)
  

  # Keep all BP which are not part of the top 20
  # Filter to keep only the ones in all cancer types (dont have to agree. Could be pos or neg)
  # Get mean ES across all cancer types. 
  ssgsea_gene_rest[[gene_x]] <- ssgsea_gene %>% 
    dplyr::filter(!BP %in% ssgsea_gene_filtered[[gene_x]][["BP"]]) %>% 
    group_by(BP) %>% 
    reframe(tmp = n_distinct(cancer_type), ES, 
              cancer_type) %>% 
    filter(tmp == 11) %>% 
    group_by(BP) %>% 
    summarize(mean_ES = mean(ES, na.rm = TRUE), .groups = "drop") %>% 
    mutate(BP = gsub("GOBP_", "", BP),
           gene = gene_x)
  
  #colnames(ssgsea_gene_rest[[gene_x]])[2] <- gene_x
}

ssgsea_all_genes <- ssgsea_gene_filtered %>% 
  bind_rows()

ssgsea_all_gene_rest <- ssgsea_gene_rest %>% 
  bind_rows()
```

```{r}
library(ComplexHeatmap) # For advanced heatmap plotting
library(circlize)

# Create a matrix with Geneset_ID as rows and Gene as columns
heatmap_matrix <- ssgsea_all_genes %>%
  pivot_wider(names_from = gene, values_from = mean_ES, values_fill = 0) %>%
  column_to_rownames("BP") %>%
  as.matrix()

# Perform hierarchical clustering on genes (columns of the matrix)
gene_dist <- dist(t(heatmap_matrix), method = "euclidean") # Distance between genes
gene_clustering <- hclust(gene_dist, method = "average")   # Hierarchical clustering

# Order genes based on clustering
ordered_genes <- colnames(heatmap_matrix)[gene_clustering$order]

# Open PDF device
pdf(file = paste0(path_save_plots, "ssGSEA_heatmap_all_cancers_onlytop20.pdf"), width = 10, height = 8)

# Create heatmap
Heatmap(
  heatmap_matrix[, ordered_genes], # Reorder columns by clustering
  name = "Mean\nEnrichment Score",
  col = colorRamp2(c(0, max(heatmap_matrix)), c("pink", "red4")), # Adjust color scale
  #col = colorRamp2(
  #c(0, max(heatmap_matrix) / 2, max(heatmap_matrix)), # Define breaks: low, mid, high
  #c("blue4", "white", "red4") # Colors for low, mid, high
#), 
  cluster_rows = FALSE, # Optionally cluster gene sets
  cluster_columns = TRUE, # Columns already ordered
  row_title = "Gene Sets",
  column_title = paste("Top 20 Most Correlated Gene Ontology Biological Processes\n In 11 Cancers Across 14 Genes"),
  heatmap_legend_param = list(
    title_gp = gpar(fontsize = 8) # Adjust legend title font size
  ),
  column_names_gp = gpar(fontsize = 8),
  column_names_rot = 45,
  show_row_names = TRUE,
  row_names_gp = gpar(fontsize = 3),
)

dev.off()

# Open PDF device
pdf(file = paste0(path_save_plots, "ssGSEA_heatmap_all_cancers_onlytop20_wo_geneset_names.pdf"), width = 5, height = 8)

# Create heatmap
Heatmap(
  heatmap_matrix[, ordered_genes], # Reorder columns by clustering
  name = "Mean\nEnrichment Score",
  col = colorRamp2(c(0, max(heatmap_matrix)), c("pink", "red4")), # Adjust color scale
  #col = colorRamp2(
  #c(0, max(heatmap_matrix) / 2, max(heatmap_matrix)), # Define breaks: low, mid, high
  #c("blue4", "white", "red4") # Colors for low, mid, high
#), 
  cluster_rows = FALSE, # Optionally cluster gene sets
  cluster_columns = TRUE, # Columns already ordered
  row_title = "Gene Sets",
  column_title = paste("Top 20 Most Correlated Gene Ontology Biological Processes\n In 11 Cancers Across 14 Genes"),
  heatmap_legend_param = list(
    title_gp = gpar(fontsize = 8) # Adjust legend title font size
  ),
  column_names_gp = gpar(fontsize = 8),
  column_names_rot = 45,
  show_row_names = FALSE,
  row_names_gp = gpar(fontsize = 3),
)

dev.off()
```

```{r}
# Second edition, where I plot the mean ES for each gene of the BP they did not have in top 20. NB, could be tissue specific, could have difference in up or down regulated...


# Create a matrix with Geneset_ID as rows and Gene as columns
heatmap_matrix_2 <- ssgsea_all_genes %>%
  pivot_wider(names_from = gene, values_from = mean_ES, values_fill = NA) %>% 
  pivot_longer(-BP, names_to = "gene", values_to = "mean_ES") %>% 
  left_join(ssgsea_all_gene_rest, by = c("BP", "gene")) %>% 
  mutate(mean_ES.x = ifelse(is.na(mean_ES.x), mean_ES.y, mean_ES.x)) %>% 
  dplyr::select(-mean_ES.y) %>% 
  dplyr::rename(mean_ES = mean_ES.x) %>% 
  pivot_wider(names_from = gene, values_from = mean_ES, values_fill = NA) %>% 
  column_to_rownames("BP") %>%
  as.matrix()

# Perform hierarchical clustering on genes (columns of the matrix)
gene_dist <- dist(t(heatmap_matrix_2), method = "euclidean") # Distance between genes
gene_clustering <- hclust(gene_dist, method = "average")   # Hierarchical clustering

# Order genes based on clustering
ordered_genes <- colnames(heatmap_matrix_2)[gene_clustering$order]

# Open PDF device
pdf(file = paste0(path_save_plots, "ssGSEA_heatmap_all_cancers_wo_geneset_names.pdf"), width = 5, height = 8)

# Create heatmap
Heatmap(
  heatmap_matrix_2[, ordered_genes], # Reorder columns by clustering
  name = "Mean\nEnrichment Score",
  col = colorRamp2(c(0, max(heatmap_matrix_2)), c("pink", "red4")), # Adjust color scale
  cluster_rows = FALSE, # Optionally cluster gene sets
  cluster_columns = TRUE, # Columns already ordered
  row_title = "Gene Sets",
  column_title = paste("Top 20 Most Correlated Gene Ontology Biological Processes\n In 11 Cancers Across 14 Genes"),
  show_row_names = FALSE,
  column_names_rot = 45,
  row_km = 3,
  #row_names_gp = gpar(fontsize = 3),
  column_names_gp = gpar(fontsize = 8),
  heatmap_legend_param = list(
    title_gp = gpar(fontsize = 8) # Adjust legend title font size
  )
)

# Close the PDF device
dev.off()


# Open PDF device
pdf(file = paste0(path_save_plots, "ssGSEA_heatmap_all_cancers.pdf"), width = 10, height = 8)

# Create heatmap
Heatmap(
  heatmap_matrix_2[, ordered_genes], # Reorder columns by clustering
  name = "Mean\nEnrichment Score",
  col = colorRamp2(c(0, max(heatmap_matrix_2)), c("pink", "red4")), # Adjust color scale
  cluster_rows = FALSE, # Optionally cluster gene sets
  cluster_columns = TRUE, # Columns already ordered
  row_title = "Gene Sets",
  column_title = paste("Top 20 Most Correlated Gene Ontology Biological Processes\n In 11 Cancers Across 14 Genes"),
  show_row_names = TRUE,
  column_names_rot = 45,
  row_km = 3,
  #row_names_gp = gpar(fontsize = 3),
  column_names_gp = gpar(fontsize = 8),
  heatmap_legend_param = list(
    title_gp = gpar(fontsize = 8) # Adjust legend title font size
  ),
  row_names_gp = gpar(fontsize = 3)
  
)

# Close the PDF device
dev.off()

```

## Tables

```{r}
ssgsea_results_all %>% 
  dplyr::select(cancer_type== "SKCM_tumor")
```

```{r}
# Top 20: 
ssgsea_all_genes %>% 
  group_by(BP) %>% 
  reframe(target_genes = list(unique(gene))) %>% 
  mutate(target_genes = sapply(target_genes, paste, collapse = ", ")) %>% 
  arrange(target_genes)

# Top 10: 
top_10_table <- ssgsea_all_genes %>% 
  group_by(gene) %>% 
  arrange(desc(mean_ES), .by_group = TRUE) %>%  # Sort by decreasing mean_ES
  slice_head(n = 10) %>% 
  ungroup() %>% 
  group_by(BP) %>% 
  reframe(target_genes = list(unique(gene))) %>% 
  mutate(target_genes = sapply(target_genes, paste, collapse = ", ")) %>% 
  arrange(target_genes)
  

for (gene_x in target_list){
  
}

#top_10_table %>% 
#  dplyr::filter(target_genes == gene_x) %>% 

top_10_table


# Make pretty table
tbl <- top_10_table %>% 
  kable(caption = paste("Top 10 most positive correlated BP")) %>%   
  kable_styling(full_width = F, position = "center", fixed_thead = T) %>%
  column_spec(1:ncol(top_10_table), width = "1cm") 


table_file_name <- paste0(path_save_plots, 
                          "top_10_table.pdf")

table<-kable(tbl, format="markdown")
cat(table, sep="\n", 
    file=table_file_name)
render(table_file_name,
       output_format = rmarkdown::pdf_document(latex_engine = "lualatex"))

```

```{r}
top_10_table %>% 
  mutate(tdo = ifelse(grepl("TDO2", target_genes), TRUE, FALSE)) %>% 
  filter(tdo)
```

# OLD

## Compare results across cancer types

```{r}
# Loop cancer types and save the gsea_results in a list...

gsea_results_ctype <- list()

for (c_type in cancer_abbr_list){
  R_element_name_2 <- paste0(file_path_xenadata, 
                             'GSEA_Rdata/gsea_results_', 
                             c_type, '.RData')
  
  if (!file.exists(R_element_name_2)){
    warning(paste("No gsea results exist for ", c_type))
    
  } else {
    gsea_results_ctype[[c_type]] <- readRDS(R_element_name_2)
  }
}
```

```{r}
#top_abs_nes <- 20

# Make list where SKCM is parted in metastatic and tumor
gene_x <- target_list[1]

gene_gsea_results <- list()
gsea_summary_compare <- list()

# For each gene, loop cancer types and extract the gene based gsea result. 
for (gene_x in target_list){
  
  ## Extract all gsea results for gene from all cancer types. 
  for (c_type in cancer_abbr_list){
    
    gsea_gene <- gsea_results_ctype[[c_type]][[gene_x]]
    gsea_gene_df <- gsea_gene %>% 
      as.data.frame()
    
    if (nrow(gsea_gene_df) > 0){
      print(paste("gsea_gene_df has", nrow(gsea_gene_df), "rows for", 
                  gene_x, "in",  c_type))
      
      if(is.null(gene_gsea_results[[gene_x]])){
        gene_gsea_results[[gene_x]] <- gsea_gene_df %>% 
          mutate(cancer_type = c_type) %>%  # Column for identifying cancer type origin
          arrange(-abs(NES))
        
      } else {
        # If gene_gsea_results[[gene_x]] exists, add as new rows: 
        tmp_df <- gsea_gene_df %>% 
          mutate(cancer_type = c_type) %>% 
          arrange(-abs(NES)) 
        
        gene_gsea_results[[gene_x]] <- gene_gsea_results[[gene_x]] %>% 
          bind_rows(tmp_df)
      }
      
    }
  }
  
  # Remove rownames
  rownames(gene_gsea_results[[gene_x]]) <- NULL
  
  gsea_summary_compare[[gene_x]] <- gene_gsea_results[[gene_x]] %>% 
    group_by(ID) %>% 
    summarise(cancer_types = paste(unique(cancer_type), collapse = ", "),
              num_cancer_types = n_distinct(cancer_type)) %>%
    arrange(ID) %>% 
    mutate(gene = gene_x)
}
```

```{r}
# Collect from all cancer types into one.
gsea_summary_compare_full <- gsea_summary_compare %>% 
  bind_rows() %>% 
  arrange(desc(num_cancer_types)) 

# Make df of max amount of cancer types agreeing on BP for each gene:
max_agreeing_ctypes <- gsea_summary_compare_full %>% 
  dplyr::select(gene, num_cancer_types) %>% 
  unique() %>% 
  group_by(gene) %>%
  summarise(num_cancer_types = max(num_cancer_types)) %>%
  dplyr::rename(max_n_ctype = num_cancer_types) 

# Make data frame only containing the BP related to gene with max number of c types agreeing (gene based max)
gsea_maxctype_compare <- gsea_summary_compare_full %>% 
  left_join(max_agreeing_ctypes, by = "gene") %>% 
  filter(num_cancer_types == max_n_ctype)


BP_max_ctype_named_list <- gsea_maxctype_compare %>% 
  dplyr::select(gene, ID) %>% 
  group_by(gene) %>% 
  summarise(related_processes = list(ID)) %>% 
  deframe()
```

```{r}
max_agreeing_ctypes %>% 
```

## Results

```{r}

gsea_result <- list()

## Collect results: 
for (gene_x in target_list){
  
  gsea_maxctype_compare_gene <- gsea_maxctype_compare %>% 
    filter(gene == gene_x)
  
  gsea_result[[gene_x]] <- gene_gsea_results[[gene_x]] %>% 
    filter(ID %in% BP_max_ctype_named_list[[gene_x]]) %>% 
    arrange(ID) %>% 
    group_by(ID) %>%
    summarise(
      min_NES = min(NES, na.rm = TRUE),
      max_NES = max(NES, na.rm = TRUE)
    ) %>% 
    mutate(keep = ifelse((min_NES > 0 & max_NES > 0) |
                           (min_NES < 0 & max_NES < 0),
                         TRUE, FALSE)) %>% 
    filter(keep) %>% 
    left_join(gsea_maxctype_compare_gene[c("ID", 
                                           "cancer_types", 
                                           "max_n_ctype", 
                                           "gene")], 
              by="ID") %>% 
    dplyr::select(-keep) 
}

  
```

```{r}
gsea_result_full <- gsea_result %>% 
  bind_rows() %>% 
  group_by(gene) %>% 
  arrange(desc(max_NES), .by_group = TRUE) %>% 
  ungroup()


# Focus on only top 20 most correlated (NES) BP: 
top_bps <- gsea_result_full %>% 
  group_by(ID) %>% 
  mutate(abs_max_NES = max(max_NES, abs(min_NES))) %>% 
  ungroup() %>% 
  dplyr::select(ID, abs_max_NES) %>% unique() %>% 
  arrange(desc(abs_max_NES)) %>% 
  dplyr::slice(1:20) %>% # Select top 20 BPs 
  dplyr::select(ID) %>% unlist(use.names = F)
  
filtered_gsea_bp <- gsea_result_full %>% 
  filter(ID %in% top_bps)
# gsea_result_full %>% dplyr::select(ID) %>% unique
```

## Plots

```{r}
# Create the bubble plot
library(packcircles)
library(ggplot2)
library(ggforce)

# Normalize size for better scaling
filtered_gsea_bp$size <- scales::rescale(filtered_gsea_bp$max_n_ctype, to = c(1, 6)) # for bubble sizes


# Packing the inner gene bubbles
gene_packing <- circleProgressiveLayout(filtered_gsea_bp$size, sizetype = "area")
filtered_gsea_bp <- cbind(filtered_gsea_bp, gene_packing)


# Packing the outer biological process bubbles
bp_sizes <- aggregate(size ~ ID, data = filtered_gsea_bp, FUN = sum)
bp_packing <- circleProgressiveLayout(bp_sizes$size, sizetype = "area")
bp_layout <- cbind(bp_sizes, bp_packing)

# Merge BP coordinates into gene data
filtered_gsea_bp <- merge(filtered_gsea_bp, 
                          bp_layout, 
                          by = "ID", suffixes = c("_gene", "_ID"))

filtered_gsea_bp <- merge(filtered_gsea_bp, 
                          bp_layout, 
                          by = "ID", suffixes = c("_gene", "_ID"))
```

```{r}
ggplot() +
  # Outer BP circles
  geom_circle(
    data = bp_layout,
    aes(x0 = x, y0 = y, r = radius),
    fill = "gray90", color = "black", alpha = 0.3
  ) +
  # Inner gene circles
  geom_circle(
    data = filtered_gsea_bp,
    aes(x0 = x_gene + x, y0 = y_gene + y, r = radius_gene, fill = max_NES),
    color = "black", alpha = 0.8
  ) +
  # Add gene labels
  geom_text(
    data = filtered_gsea_bp,
    aes(x = x_gene + x, y = y_gene + y, label = gene),
    size = 3
  ) +
  # Add BP labels
  geom_text(
    data = bp_layout,
    aes(x = x, y = y, label = ID),
    size = 5, fontface = "bold"
  ) +
  scale_fill_gradient(low = "blue", high = "red") +
  theme_void() +
  labs(
    title = "Bubble Plot: Biological Processes and Associated Genes",
    fill = "Max NES"
  )
```
