# Immune deconvolution of TCGA Pan-Cancer from the XenaBrowser

## Load libraries:

```{r}
library(tidyverse)
library(R.utils)
library(immunedeconv)
library(stringr)
library(clusterProfiler)
library(org.Hs.eg.db)
#library(biomaRt)
#library(BiocFileCache)
#library(BiocManager)
```

## Download dataset:

```{r}
cohort = "TCGA_PANCAN"
file_path <- "Data/XenaBrowser/"
dir.create(file_path, showWarnings = FALSE, recursive = TRUE)
data_type = "gene_expression_RNAseq_tpm"

## Specify the URL of the file you want to download
url <- "https://toil-xena-hub.s3.us-east-1.amazonaws.com/download/tcga_RSEM_gene_tpm.gz"

# Specify the file name and location where you want to save the file on your computer
file_name_data <- paste0(cohort, "_", data_type)

options(timeout = 10000)

if (!(file.exists(paste(file_path, file_name_data, ".tsv.gz", sep = "")))){
  download.file(url, paste(file_path, file_name_data, ".tsv.gz", sep = ""), mode = "wb")
}

if (!(file.exists(paste(file_path, file_name_data, ".tsv", sep = "")))){
  gunzip(paste(file_path, file_name_data, ".tsv.gz", sep = ""))
}
```

## Import data:

```{r}
df_data <- as_tibble(read.csv(paste(file_path, file_name_data, ".tsv", sep = ""),sep = "\t")) 
df_phenotype_disease <- as_tibble(read.csv(paste(file_path, file_name_data, ".tsv", sep = ""),sep = "\t"))
```

## Data wrangling:

Extract sample IDs for specific cancer types:

```{r}
## Get sample IDs for AML:
AML_samples <- as_tibble(df_phenotype_disease) |>
  filter(X_primary_disease == "acute myeloid leukemia") |>
  dplyr::select(sample)

SCM_samples <- as_tibble(df_phenotype_disease) |>
  filter(X_primary_disease == "skin cutaneous melanoma") |>
  dplyr::select(sample)

PAD_samples <- as_tibble(df_phenotype_disease) |>
  filter(X_primary_disease == "pancreatic adenocarcinoma") |>
  dplyr::select(sample)

disease_list <- df_phenotype_disease |>
  distinct(X_primary_disease)
```

Filter the expression data frame to include only samples from selected cancer type:

```{r}
## Get only samples from AML cancer:
df_data_gene_expr_AML <- df_data |>
  rename_with(~ str_replace_all(., "\\.", "-")) |>
  dplyr::select(sample, any_of(AML_samples$sample)) |>
  dplyr::rename(gene = sample) |>
  mutate(gene = str_replace(gene, "\\..*", ""))

df_data_gene_expr_SCM <- df_data |>
  rename_with(~ str_replace_all(., "\\.", "-")) |>
  dplyr::select(sample, any_of(SCM_samples$sample)) |>
  dplyr::rename(gene = sample) |>
  mutate(gene = str_replace(gene, "\\..*", ""))

df_data_gene_expr_PAD <- df_data |>
  rename_with(~ str_replace_all(., "\\.", "-")) |>
  dplyr::select(sample, any_of(PAD_samples$sample)) |>
  dplyr::rename(gene = sample) |>
  mutate(gene = str_replace(gene, "\\..*", ""))
```

```{r}
target_list <- c("CD274", "PDCD1LG2", "IDO1", "TDO2", "ARG1", "ARG2", "TGFB1", "CCL22", "CCL2", "LGALS3", "LRRC32", "IL10", "SIGLEC15", "BIRC7")
```

Convert Ensemble IDs to HGNC symbols:

```{r}
# Define your list of Ensembl gene IDs
#ensembl_genes <- df_data_gene_expr$gene
#gene_mapping <- bitr(ensembl_genes, fromType = "ENSEMBL", toType = "SYMBOL", OrgDb = "org.Hs.eg.db")
```

```{r}
gene_expr_df_AML <- as_tibble(gene_mapping) |>
  dplyr::rename(gene = ENSEMBL, symbol = SYMBOL) |>
  inner_join(df_data_gene_expr_AML, by="gene") |>
  dplyr::select(symbol, everything(), -gene) |>
  distinct(symbol, .keep_all = TRUE) |>
  #mutate(across(-1, as.numeric)) |>
  #mutate(across(-1, ~ (2^.x) - 0.001)) |>
  column_to_rownames(var = "symbol")

gene_expr_df_SCM <- as_tibble(gene_mapping) |>
  dplyr::rename(gene = ENSEMBL, symbol = SYMBOL) |>
  inner_join(df_data_gene_expr_SCM, by="gene") |>
  dplyr::select(symbol, everything(), -gene) |>
  distinct(symbol, .keep_all = TRUE) |>
  #mutate(across(-1, as.numeric)) |>
  #mutate(across(-1, ~ (2^.x) - 0.001)) |>
  column_to_rownames(var = "symbol")

gene_expr_df_PAD <- as_tibble(gene_mapping) |>
  dplyr::rename(gene = ENSEMBL, symbol = SYMBOL) |>
  inner_join(df_data_gene_expr_PAD, by="gene") |>
  dplyr::select(symbol, everything(), -gene) |>
  distinct(symbol, .keep_all = TRUE) |>
  #mutate(across(-1, as.numeric)) |>
  #mutate(across(-1, ~ (2^.x) - 0.001)) |>
  column_to_rownames(var = "symbol")
```

```{r}
gene_expr_matrix_AML <- as.matrix(gene_expr_df_AML)
gene_expr_matrix_SCM <- as.matrix(gene_expr_df_SCM)
gene_expr_matrix_PAD <- as.matrix(gene_expr_df_PAD)

#res_quantiseq <- deconvolute(gene_expr_matrix, "quantiseq", tumor = TRUE)
```

## Deconvolution:

Using ESTIMATE which computes a score for the tumoral, immune and stromal components and the fraction of tumor purity.

```{r}
estimate_AML = deconvolute_estimate(gene_expr_matrix_AML)
estimate_SCM = deconvolute_estimate(gene_expr_matrix_SCM)
estimate_PAD = deconvolute_estimate(gene_expr_matrix_PAD)
```

Plot estimates as a boxplot:

```{r}
estimate_AML |>
  rownames_to_column(var = "estimates") |>
  pivot_longer(cols = -estimates,
               names_to = "sample",
               values_to = "scores") |>
  ggplot(aes(x=estimates, y=scores)) + 
  geom_boxplot() 
```

```{r}
res_quantiseq |>
  pivot_longer(cols = -cell_type,
               names_to = "sample",
               values_to = "percentage") |>
  ggplot(aes(x=cell_type, y=percentage)) + 
  geom_boxplot() +
  labs(
    title = "Pancreatic Adenocarcinoma",
    subtitle = "Distribution of cell populations",
    caption = "Source: Xena Browser, TCGA PANCAN",
    x = "Cell types",
    y = "Percentage"
  ) +
  theme(
    plot.title = element_text(color = "#0099f8", size = 16, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
    plot.caption = element_text(face = "italic"),
    axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
df_data_long <- df_data |>
  rename(gene = sample) |>
  pivot_longer(cols = -gene, 
                 names_to = "sample", 
                 values_to = "gene_exp") |>
  mutate(sample = str_replace_all(sample, "\\.", "-"),
         gene = str_replace(gene, "\\..*", ""))
```

```{r}
df_data_long |>
  filter(gene %in% target_list_ENSG) |>
  inner_join(df_phenotype_disease, by=c("sample"))
```

```{r}
estimate <- immunedeconv::deconvolute_estimate(gene_expr_matrix)
```
