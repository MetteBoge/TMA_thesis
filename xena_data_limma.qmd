---
title: "xena_data_limma"
format: html
editor: visual

output:
  pdf_document:
    latex_engine: xelatex
    extra_dependencies: ["fontspec"]
header-includes:
  - \usepackage{amsmath}  # Required for math symbols like $\geq$
---

```{r}
rm(list = ls())
set.seed(123)  # Use any consistent value

# Control operations: 
load_tpm <- FALSE
plot_mds <- FALSE

# Until I decide to loop, define cancer type here: 
c_type <- "LUAD"
# Only relevant if SKCM: choose SKCM_tumor or SKCM_metastatic
sub_ctype <- "SKCM_tumor"
# PAAD

# After multivariate analysis I look at significant phenotypes, but filter out the ones that are <min_sample_size for any of the two categories being compared. 
# 10 has been standard.
min_sample_size <- ifelse(c_type %in% c("CHOL", "DLBC"), 5, 10)
```

## Load libraries and data

```{r}
library(tidyverse)
library(ggcorrplot)
library(limma)
#library(Glimma)
library(ggbiplot)
library(reshape2)
library(edgeR)
library(R.utils)
library(magrittr)
library(knitr)
library(kableExtra)
library(car)
library(glmnet)
library(stringi)
library(viridis)
library(Cairo)

library(rmarkdown)
```

```{r}
file_path_xenadata <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/Xena/"
path_save_plots <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Plots/limma_analysis/"
file_path_data <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/"

file_name_pheno1 <- "TCGA_PANCAN_sampleType_primaryDisease"
file_name_pheno2 <- "TCGA_PANCAN_curated_clinical_data"


target_list <- c("CD274", "PDCD1LG2", "IDO1", "TDO2", "ARG1", "ARG2", "TGFB1", "CCL22", "CCL2", "LGALS3","LRRC32", "IL10", "SIGLEC15", "BIRC7")
cancer_abbr_list <- c("LAML", "CHOL", "CESC", "DLBC", "HNSC", "BRCA", "PAAD", "SKCM", "LUAD", "LUSC")

# Phenotype highlighted by Morten: 
interesting_phenotype <- list("LAML" = c("acute_myeloid_leukemia_calgb_cytogenetics_risk_category",
                                         "age_at_initial_pathologic_diagnosis",
                                         "gender",
                                "leukemia_french_american_british_morphology_code"
# Almost all are NA             "molecular_analysis_abnormality_testing_result"
                                ),
                              "CHOL" = c("age_at_initial_pathologic_diagnosis",
                                         "ca_19_9_level",
                                         "child_pugh_classification_grade",
                                         "eastern_cancer_oncology_group",
                                         "gender",
                                         "histological_type",
# Only one had YES                       "history_of_neoadjuvant_treatment",
                                         "neoplasm_histologic_grade",
                                         "pathologic_stage",
                                         "radiation_therapy"),
                              "BRCA" = c("ER_Status_nature2012",
# This is same as gender                 "Gender_nature2012",
                                         "HER2_Final_Status_nature2012",
                                         "additional_pharmaceutical_therapy",
                                         "additional_radiation_therapy",
                                         "age_at_initial_pathologic_diagnosis",    # This is same as ER_Status_nature2012 "breast_carcinoma_estrogen_receptor_status",
                                         "er_level_cell_percentage_category",
# Only using female samples              "gender",
                                         "histological_type",
                                         "history_of_neoadjuvant_treatment",
                                         "margin_status",
                                         "menopause_status",
                                         "pathologic_stage",
                                         "radiation_therapy",
                                         "targeted_molecular_therapy"),
                              "CESC" = c("additional_pharmaceutical_therapy",
                                         "additional_radiation_therapy",
                                         "adjuvant_rad_therapy_prior_admin",
                                         "age_at_initial_pathologic_diagnosis",
                                         "brachytherapy_administered_status",
                                         "clinical_stage",
                                         "eastern_cancer_oncology_group",
                                         "gender",
                                         "histological_type",
# All have NO                            "history_of_neoadjuvant_treatment",
# Too few in each subtype                "human_papillomavirus_type",
                                         "neoplasm_histologic_grade",
                                         "primary_therapy_outcome_success",
                                         "radiation_therapy",
                                         "targeted_molecular_therapy",
                                         "tobacco_smoking_history"),
                              "HNSC" = c("additional_pharmaceutical_therapy",
                                         "additional_radiation_therapy",
                                         "age_at_initial_pathologic_diagnosis",
                                         "clinical_stage",
                                         "gender",
                                         "histological_type",
                                         "history_of_neoadjuvant_treatment",
                                         "neoplasm_histologic_grade",
                                         "pathologic_stage",
                                         "primary_therapy_outcome_success",
                                         "targeted_molecular_therapy"),
                              "DLBC" = c("age_at_initial_pathologic_diagnosis",
                                         "bone_marrow_involvement",
                                         "clinical_stage",
                                         "eastern_cancer_oncology_group",
                                         "extranodal_involvement",
                                         "gender",
                                         "histological_type",
# All have Negative                      "hiv_status",
                                         "ldh_level",
                                         "primary_therapy_outcome_success",
                                         "radiation_therapy",
                                         "targeted_molecular_therapy"),
                              "LUAD" = c("additional_pharmaceutical_therapy",
                                         "additional_radiation_therapy",
                                         "age_at_initial_pathologic_diagnosis",
                                         "eastern_cancer_oncology_group",
                                         "egfr_mutation_result",
                                         "gender",
                                         "histological_type",
                                         "history_of_neoadjuvant_treatment",
                                         "karnofsky_performance_score",
                                         "number_pack_years_smoked",
                                         "pathologic_stage",
                                         "primary_therapy_outcome_success",
                                         "radiation_therapy",
                                         "residual_tumor",
                                         "targeted_molecular_therapy",
                                         "tobacco_smoking_history"),
                              "LUSC" = c("additional_pharmaceutical_therapy",
                                         "additional_radiation_therapy",
                                         "eastern_cancer_oncology_group",
                                         "gender",
                                         "histological_type",
                                         "history_of_neoadjuvant_treatment",
                                         "karnofsky_performance_score",
                                         "pathologic_stage",
                                         "primary_therapy_outcome_success",
                                         "radiation_therapy",
                                         "targeted_molecular_therapy",
                                         "tobacco_smoking_history"),
                              "SKCM" = c("additional_pharmaceutical_therapy",
                                         "additional_radiation_therapy",
                                         "age_at_initial_pathologic_diagnosis",
                                         "breslow_depth_value",
                                         "gender",
                                         "history_of_neoadjuvant_treatment",
                                         "lactate_dehydrogenase_result",
                                         "melanoma_clark_level_value",
                                         "melanoma_ulceration_indicator",
                                         "pathologic_stage",
                                         "radiation_therapy"),
                              "PAAD" = c("additional_pharmaceutical_therapy",
                                         "additional_radiation_therapy",
                                         "age_at_initial_pathologic_diagnosis",
                                         "alcoholic_exposure_category",
# Dont know what it means. Data sparsity "frequency_of_alcohol_consumption",
                                         "gender",
                                         "histological_type",
                                         "history_of_chronic_pancreatitis",
                                         "history_of_diabetes",
# This has only one yes, rest are no     "history_of_neoadjuvant_treatment",
                                         "neoplasm_histologic_grade",
                                         "pathologic_stage",
                                         "primary_therapy_outcome_success",
                                         "radiation_therapy",
                                         "targeted_molecular_therapy",
                                         "tobacco_smoking_history")
)



rename_phenotype = list(
  "acute_myeloid_leukemia_calgb_cytogenetics_risk_category" = "AML calgb Cytogenetics Risk",
  "age_at_initial_pathologic_diagnosis" = "Age at Diagnosis",
  "gender" = "Gender",
  "leukemia_french_american_british_morphology_code" = "FAB classification",
  "ca_19_9_level" = "CA 19-9 level",
  "child_pugh_classification_grade" = "Child-Pugh classification",
  "eastern_cancer_oncology_group" = "ECOG Performance Status",
  "histological_type" = "Histological Type",
  "history_of_neoadjuvant_treatment" = "History of Neoadjuvant Treatment",
  "neoplasm_histologic_grade" = "Neoplasm Histologic Grade",
  "pathologic_stage" = "Pathologic Stage",
  "radiation_therapy" = "Radiation Therapy",
  "ER_Status_nature2012" = "ER Status",
  "Gender_nature2012" = "Gender",
  "HER2_Final_Status_nature2012" = "HER2 Final Status",
  "additional_pharmaceutical_therapy" = "Additional Pharmaceutical Therapy",
  "additional_radiation_therapy" = "Additional Radiation Therapy",
  "breast_carcinoma_estrogen_receptor_status" = "ER Status",
  "er_level_cell_percentage_category" = "ER Cell Percentage",
  "margin_status" = "Margin Status",
  "menopause_status" = "Menopause Status",
  "targeted_molecular_therapy" = "Targeted Molecular Therapy",
  "adjuvant_rad_therapy_prior_admin" = "Adjuvant Radiation Therapy",
  "brachytherapy_administered_status" = "Brachytherapy",
  "clinical_stage" = "Clinical Stage",
  "human_papillomavirus_type" = "HPV Type",
  "tobacco_smoking_history" = "Tobacco Smoking History",
  "bone_marrow_involvement" = "Bone Marrow Involvement",
  "extranodal_involvement" = "Extranodal Involvement",
  "hiv_status" = "HIV Status",
  "ldh_level" = "LDH Level",
  "primary_therapy_outcome_success" = "Primary Therapy Outcome",
  "residual_tumor" = "Residual Tumor",
  "karnofsky_performance_score" = "Karnofsky Performance Score",
  "breslow_depth_value" = "Breslow Depth",
  "lactate_dehydrogenase_result" = "LDH Result",
  "melanoma_clark_level_value" = "Melanoma Clark Level",
  "melanoma_ulceration_indicator" = "Melanoma Ulceration",
  "alcoholic_exposure_category" = "Alcoholic Exposure",
  "history_of_chronic_pancreatitis" = "History of Chronic Pancreatitis",
  "history_of_diabetes" = "History of Diabetes",
  "egfr_mutation_result" = "EGFR Mutation Result",
  "number_pack_years_smoked" = "Number of Pack Years Smoked")
```

```{r}
# Read tne phenotype data:
df_st_pd <- read.csv(paste(file_path_xenadata, 
                           file_name_pheno1, ".tsv", sep = ""),sep = "\t")
df_clin_pd <- read.csv(paste(file_path_xenadata, 
                             file_name_pheno2, ".tsv", sep = ""),sep = "\t")

df_pheno <- df_clin_pd %>% 
  full_join(df_st_pd, by = "sample")

#interesting_phenotype %>% summary()
```

```{r}
# Load in more phenotype data

#for (c_type in cancer_abbr_list) {
download_link <- paste0("https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/TCGA.", 
                        c_type, 
                        ".sampleMap%2F",
                        c_type, 
                        "_clinicalMatrix")

file_name_pheno <- paste0(file_path_xenadata, "TCGA_", c_type, "_phenotype.tsv")


if (!(file.exists(file_name_pheno))){
 download.file(download_link, file_name_pheno, mode = "wb")
} 

# Load data tables to list: 
if (!exists("phenotype_ctype")){
  phenotype_ctype <- list()
  phenotype_ctype[[c_type]] <- read.csv(file_name_pheno, sep = "\t") %>% 
    dplyr::rename(sample = sampleID)
} else if (!c_type %in% names(phenotype_ctype)){
  phenotype_ctype[[c_type]] <- read.csv(file_name_pheno, sep = "\t") %>% 
    dplyr::rename(sample = sampleID)
}
#}

```

```{r}

top10_mutations <- list()

# Load in the mutation data: 

#for (c_type in cancer_abbr_list) {
download_link <- paste0("https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/mc3_gene_level%2F", 
                        c_type, 
                        "_mc3_gene_level.txt.gz")
if (c_type == "LAML"){
  download_link <- "https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/TCGA.LAML.sampleMap%2Fmutation_wustl_gene.gz"
}

file_name_mut <- paste0(file_path_xenadata, "TCGA_", c_type, "_non-silent_mutation")


if (!(file.exists(paste0(file_name_mut, ".tsv.gz")) | 
      file.exists(paste0(file_name_mut, ".tsv")))){
  download.file(download_link, paste0(file_name_mut, ".tsv.gz"), mode = "wb")
} 
if (!(file.exists(paste0(file_name_mut, ".tsv")))){
  gunzip(paste0(file_name_mut, ".tsv.gz"))
}


# Load data tables to list: 
if (!exists("mut_ctype")){
  mut_ctype <- list()
  mut_ctype[[c_type]] <- read.csv(paste0(file_name_mut, ".tsv"),
                                  sep = "\t")
  
  colnames(mut_ctype[[c_type]]) <- gsub("\\.", "-", colnames(mut_ctype[[c_type]]))
  
  # Filter to only contain mutations occuring in >= 5% of all samples: 
  #num_cols <- ncol(mut_ctype[[c_type]]) - 1
  
  # Keep only top 10 most mutated genes: 
  mut_ctype[[c_type]] <- mut_ctype[[c_type]] %>% 
    mutate(count_ones = rowSums(dplyr::select(., -sample) == 1)) %>% # >= (0.1*num_cols))
    arrange(desc(count_ones)) %>% 
    slice_head(n = 10) %>% 
    dplyr::select(-count_ones) %>% 
    mutate(across(everything(), ~replace(., . ==  1 , "MUT"))) %>% 
    mutate(across(everything(), ~replace(., . ==  0 , "WT")))
  
  # Change format to be compatible with phenotype data: 
  mut_ctype[[c_type]] <- mut_ctype[[c_type]] %>% 
    dplyr::rename(mut_gene = sample) %>% 
    pivot_longer(cols = -mut_gene,
                 names_to = "sample",
                 values_to = "mutation") %>% 
    pivot_wider(names_from = mut_gene,   # Convert gene names to separate columns
                values_from = mutation, 
                names_prefix = "mut_")
  
} else if (!c_type %in% names(mut_ctype)){
  mut_ctype[[c_type]] <- read.csv(paste0(file_name_mut, ".tsv"),
                                  sep = "\t")
  
  colnames(mut_ctype[[c_type]]) <- gsub("\\.", "-", colnames(mut_ctype[[c_type]]))
  
  # Keep only top 10 most mutated genes: 
  mut_ctype[[c_type]] <- mut_ctype[[c_type]] %>% 
    mutate(count_ones = rowSums(select(., -sample) == 1)) %>% # >= (0.1*num_cols))
    arrange(desc(count_ones)) %>% 
    slice_head(n = 10) %>% 
    select(-count_ones) %>% 
    mutate(across(everything(), ~replace(., . ==  1 , "MUT"))) %>% 
    mutate(across(everything(), ~replace(., . ==  0 , "WT")))
    
  
  # Change format to be compatible with phenotype data: 
  mut_ctype[[c_type]] <- mut_ctype[[c_type]] %>% 
    dplyr::rename(mut_gene = sample) %>% 
    pivot_longer(cols = -mut_gene,
                 names_to = "sample",
                 values_to = "mutation") %>% 
    pivot_wider(names_from = mut_gene,   # Convert gene names to separate columns
                values_from = mutation, 
                names_prefix = "mut_")
}

top10_mutations <- c(colnames(mut_ctype[[c_type]]))
  #c(top10_mutations, colnames(mut_ctype[[c_type]]))
#}

top10_mutations <- top10_mutations %>% unlist() %>%  unique() 
top10_mutations <- top10_mutations[-1]
#top10_mutations <- gsub("mut_", "", top10_mutations)
```

### Sample to include

```{r}
# Collect sample IDs in lists
sample_id_of_interest <- list()

#for (c_type in cancer_abbr_list){
df_pheno_c_type <- df_pheno %>% 
  filter(cancer.type.abbreviation == c_type)

# Filter sample ids to only include those of tumor tissue. For LAML: only PBMC. 
# For Melanoma, both metastatic and tumor. 
if (c_type == "LAML"){
 # Choose those who do not have atra_exposure
 no_atra_exp <- phenotype_ctype[[c_type]] %>% 
   filter(atra_exposure != "YES") %>% 
   dplyr::select(sample) %>% 
   unlist(use.names = F)
 
 sample_id_of_interest[[c_type]] <- df_pheno_c_type %>% 
   filter(sample_type == "Primary Blood Derived Cancer - Peripheral Blood",
          sample %in% no_atra_exp) %>%
   dplyr::select(sample)
 
} else if(c_type == "SKCM"){
  
  if (sub_ctype == "SKCM_tumor"){
    sample_id_of_interest[["SKCM"]] <- df_pheno_c_type %>% 
      filter(sample_type == "Primary Tumor") %>%
      dplyr::select(sample)
    
  } else if (sub_ctype == "SKCM_metastatic"){
    sample_id_of_interest[["SKCM"]] <- df_pheno_c_type %>% 
      filter(sample_type == "Metastatic") %>%
      dplyr::select(sample)
  }

  # Filter out Male if BRCA (as MOrten told us to)
} else if(c_type == "BRCA"){
    sample_id_of_interest[[c_type]] <- df_pheno_c_type %>% 
    filter(sample_type == "Primary Tumor", 
           gender == "FEMALE") %>%
    dplyr::select(sample) 
  
} else {
  sample_id_of_interest[[c_type]] <- df_pheno_c_type %>% 
    filter(sample_type == "Primary Tumor") %>%
    dplyr::select(sample) 
}
#}


```

Seems like Limma and voom works best with raw counts or expected counts as input. <https://biostar.usegalaxy.org/p/10648/>.

```{r}
# Load in expected count data: 

if (!exists("df_expected_count")){
  df_expected_count <- list()
  
  #for (c_type in cancer_abbr_list){
  
  df_expected_count[[c_type]] <- read_tsv(paste0(file_path_xenadata, "TCGA_pancan_expected_count_", c_type, ".tsv"), 
                                show_col_types = FALSE) %>% 
    mutate(across(-c(sample), function(x) 2^x-1)) # Reverse log2
  
  # samples to select (with phenotype, gene exp data and correct sample type)
  samples_to_select <- intersect(unlist(sample_id_of_interest[[c_type]]),
            intersect(df_pheno$sample, colnames(df_expected_count[[c_type]])))
  
  # Filter samples out which are not in phenotype data and of interest: 
  df_expected_count[[c_type]] <- df_expected_count[[c_type]] %>% 
    dplyr::select(sample, all_of(samples_to_select))
  
  # Change gene IDs to gene names: 
  geneName_ensg <- read_csv("C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/targets_ensg.csv")
  geneName_ensg <- geneName_ensg %>% 
    dplyr::rename(gene_ensg_shrt = converted_alias) %>% 
    dplyr::select(name, gene_ensg_shrt)
  
  df_expected_count[[c_type]] <- df_expected_count[[c_type]] %>% 
    mutate(gene_ensg_shrt = gsub("\\..*", "", sample)) %>% 
    dplyr::select(-sample) %>% 
    relocate(gene_ensg_shrt) %>% 
    left_join(geneName_ensg, by = "gene_ensg_shrt") %>%
    dplyr::rename(sample = name) %>% 
    relocate(sample) %>% 
    mutate(sample = ifelse(is.na(sample), gene_ensg_shrt, sample)) %>% 
    dplyr::select(-gene_ensg_shrt)
  
  #}
}


```

```{r}
# Load in cell fraction data (to be used as phenotype data):
df_cellfrac <- read_tsv(paste0(file_path_data, "results_quantiseq_categorized.tsv"),
         show_col_types = F) %>% 
  filter(sample %in% samples_to_select)

# Change column name to include "cellfrac"
new_colnames <- colnames(df_cellfrac) %>% 
  make.names() %>% 
  paste0("cellfrac_", .)

new_colnames <- c("sample", new_colnames[-1])

colnames(df_cellfrac) <- new_colnames
```

## Collect phenotype data:

```{r}

# Common colnames in two phenotype dataframes: 
com_cols <- intersect(colnames(df_pheno), colnames(phenotype_ctype[[c_type]]))
rm_cols <- com_cols[com_cols != "sample"]

# Filter out samples that are not in expected count data:
# Add the extra ctype specific phenotype data: 
# Add mutation data for top 10 most mutated genes: 
df_pheno_2 <- df_pheno %>% 
  dplyr::filter(sample %in% colnames(df_expected_count[[c_type]])) %>% 
  dplyr::select(-rm_cols) %>% 
  left_join(phenotype_ctype[[c_type]], by = "sample") %>% 
  left_join(mut_ctype[[c_type]], by = "sample")
  
# Change blank cells to NA
df_pheno_2[df_pheno_2 == ""] <- NA

# Remove columns only consisting of NAs: 
df_pheno_2 <- df_pheno_2 %>% 
  select_if(function(x) { sum (!is.na(x)) >0})

# Add the cell fraction data to df_pheno_2 before merging to 
df_pheno_2 <- df_pheno_2 %>% 
  left_join(df_cellfrac, by="sample")

rownames(df_pheno_2) <- df_pheno_2$sample

# Select only phenotypes of interst and top10 mutations:
# Select only samples of interest as well
df_pheno_of_interst <- df_pheno_2 %>% 
  dplyr::select(interesting_phenotype[[c_type]], 
                starts_with("mut"),
                starts_with("cellfrac_")) %>% 
  filter(row.names(df_pheno_2) %in% samples_to_select)

# Change "[Discrepancy]" and "Not_Classified" to be NA: 
df_pheno_of_interst <- df_pheno_of_interst %>% 
  mutate_all(~replace(., . == "[Discrepancy]", NA)) %>% 
  mutate_all(~replace(., . == "Not Classified", NA)) %>% 
  mutate_all(~replace(., . == "Other, specify", NA)) %>% 
  mutate_all(~replace(., . == "Mixed Histology (please specify)", NA)) %>% 
  mutate_all(~replace(., . == "GX", NA)) %>% 
  mutate_all(~replace(., . == "Stage_X", NA)) %>% 
  mutate_all(~replace(., . == "RX", NA)) %>% 
  mutate_all(~replace(., . == "Indeterminate", NA)) %>% 
  mutate_all(~replace(., . == "Not applicable", NA)) 

# Change errors entries with pipe: 
df_pheno_of_interst <- df_pheno_of_interst %>% 
  mutate(across(
    where(is.character), # Only apply to columns with character data
    ~ {
      split_vals <- str_split(.x, "\\|")  # Split the string by '|'
      # Check if all elements in the list are the same
      map_chr(split_vals, ~ if_else(length(unique(.x)) == 1, unique(.x)[1], NA_character_))
    }
  ))

# Remove columns with only NAs and substitute space with _
df_pheno_of_interst <- df_pheno_of_interst %>% 
  dplyr::select(where(~ any(!is.na(.)))) %>% 
  mutate_all(~ gsub(" ", "_", .))
```

### Modifications to phenotypes

```{r}

# Change the space in names: 
if("histological_type" %in% colnames(df_pheno_of_interst)) {
  df_pheno_of_interst <- df_pheno_of_interst %>% 
    mutate(histological_type = gsub(" ", "_", histological_type)) %>% 
    mutate(histological_type = gsub("-", "_", histological_type)) %>% 
    mutate(histological_type = gsub("\\(", "", histological_type)) %>% 
    mutate(histological_type = gsub("\\)", "", histological_type)) %>% 
    mutate(histological_type = ifelse(!is.na(histological_type),
                                      make.names(histological_type),
                                      histological_type)) %>% 
    mutate(histological_type = gsub("Pancreas_", "", histological_type))
}


# Change age to be based on quantiles instead (young, old)
if ("age_at_initial_pathologic_diagnosis" %in% colnames(df_pheno_of_interst)){
  stat_age <- df_pheno_of_interst %>% 
    dplyr::select(age_at_initial_pathologic_diagnosis) %>% 
    unlist() %>% as.numeric() %>% 
    summary()

  q1_age <- stat_age["1st Qu."] %>% as.numeric()  %>% round()
  median_age <- stat_age["Median"] %>% as.numeric() %>% round()
  q3_age <- stat_age["3rd Qu."] %>% as.numeric() %>% round()
  
  df_pheno_of_interst <- df_pheno_of_interst %>% 
    mutate(age_at_initial_pathologic_diagnosis = 
             as.numeric(age_at_initial_pathologic_diagnosis)) %>% 
    mutate(
    age_at_initial_pathologic_diagnosis = case_when(
      age_at_initial_pathologic_diagnosis < q1_age ~ paste0("less_than_", q1_age),
      age_at_initial_pathologic_diagnosis >= q1_age & 
        age_at_initial_pathologic_diagnosis < median_age ~ paste0("between_", q1_age, "_(incl)_and_", median_age, "_(excl)"),
      age_at_initial_pathologic_diagnosis >= median_age & 
        age_at_initial_pathologic_diagnosis < q3_age ~ paste0("between_", median_age, "_(incl)_and_", q3_age, "_(excl)"),
      age_at_initial_pathologic_diagnosis >= q3_age ~  paste0("more_than_or_eq_",
                                                              q3_age)
    )
  )
} 

# # Create a new factor that combines categories
if("alcoholic_exposure_category" %in% colnames(df_pheno_of_interst)) {
  df_pheno_of_interst <- df_pheno_of_interst %>% 
    mutate(alcoholic_exposure_category = factor(
      ifelse(alcoholic_exposure_category %in% c("Occasional_Drinker", 
                                                "Social_Drinker"), 
         "Occasional_or_Social_Drinker", 
         alcoholic_exposure_category))) %>% 
    mutate(alcoholic_exposure_category = gsub(" ", "_", alcoholic_exposure_category))
  
}

#frequency_of_alcohol_consumption

if ("breslow_depth_value" %in% colnames(df_pheno_of_interst)){
  # Do not use breslowth depth value for metastatic melanoma.
  if (sub_ctype == "SKCM_tumor"){
    stat_breslow <- df_pheno_of_interst[["breslow_depth_value"]] %>% 
      as.numeric() %>% 
      summary()
    
    q1_breslow <- stat_breslow["1st Qu."] %>% as.numeric() %>% round()
    median_breslow <- stat_breslow["Median"] %>% as.numeric() %>% round()
    q3_breslow <- stat_breslow["3rd Qu."] %>% as.numeric() %>% round()
    
    df_pheno_of_interst <- df_pheno_of_interst %>% 
      mutate(breslow_depth_value = 
               as.numeric(breslow_depth_value)) %>% 
      mutate(
      breslow_depth_value = case_when(
        breslow_depth_value < q1_breslow ~ paste0("less_than_", q1_breslow),
        breslow_depth_value >= q1_breslow & 
          breslow_depth_value < median_breslow ~ paste0("between_", q1_breslow, "_(incl)_and_", median_breslow, "_(excl)"),
        breslow_depth_value >= median_breslow & 
          breslow_depth_value < q3_breslow ~ paste0("between_", median_breslow, "_(incl)_and_", q3_breslow, "_(excl)"),
        breslow_depth_value >= q3_breslow ~  paste0("more_than_or_eq_",
                                                                q3_breslow)
      )
    )
  
  } else {
    df_pheno_of_interst <- df_pheno_of_interst %>% 
      dplyr::select(-breslow_depth_value)
  }
  
}

if ("number_pack_years_smoked" %in% colnames(df_pheno_of_interst)){
  stat_packyears <- df_pheno_of_interst[["number_pack_years_smoked"]] %>% 
    as.numeric() %>% 
    summary()
  
  q1_packyears <- stat_packyears["1st Qu."] %>% as.numeric() %>% round()
  median_packyears <- stat_packyears["Median"] %>% as.numeric() %>% round()
  q3_packyears <- stat_packyears["3rd Qu."] %>% as.numeric() %>% round()
  
  df_pheno_of_interst <- df_pheno_of_interst %>% 
    mutate(number_pack_years_smoked = 
             as.numeric(number_pack_years_smoked)) %>% 
    mutate(
    number_pack_years_smoked = case_when(
      number_pack_years_smoked < q1_packyears ~ paste0("less_than_", q1_packyears),
      number_pack_years_smoked >= q1_packyears & 
        number_pack_years_smoked < median_packyears ~ paste0("between_", q1_packyears, "_(incl)_and_", median_packyears, "_(excl)"),
      number_pack_years_smoked >= median_packyears & 
        number_pack_years_smoked < q3_packyears ~ paste0("between_", median_packyears, "_(incl)_and_", q3_packyears, "_(excl)"),
      number_pack_years_smoked >= q3_packyears ~  paste0("more_than_or_eq_",
                                                              q3_packyears)
    )
  )
}

# Collect three of the neoplasm histologic stages into one: 
if("neoplasm_histologic_grade" %in% colnames(df_pheno_of_interst)) {
  
  if (c_type %in% c("PAAD", "CESC")){
    df_pheno_of_interst <- df_pheno_of_interst %>% 
      mutate(neoplasm_histologic_grade = factor(
        ifelse(neoplasm_histologic_grade %in% c("G3", "G4"), 
           "G3_G4", 
           neoplasm_histologic_grade)))
  }
  
}

# Collect stages into one: 
if("pathologic_stage" %in% colnames(df_pheno_of_interst)) {
  if (c_type == "PAAD"){
    
    
    df_pheno_of_interst <- df_pheno_of_interst %>% 
      mutate(pathologic_stage = factor(
        ifelse(pathologic_stage %in% c("Stage_I", "Stage_IA", "Stage_IB"), 
           "Stage_I", 
           ifelse(pathologic_stage %in% c("Stage_IIA", "Stage_IIB"),
                  "Stage_II", 
                  ifelse(pathologic_stage %in% c("Stage_III", "Stage_IV"),
                         "Stage_III_IV", pathologic_stage)))))
    
  } else {
    
    df_pheno_of_interst <- df_pheno_of_interst %>% 
      mutate(pathologic_stage = factor(
        ifelse(pathologic_stage %in% c("Stage_IA", "Stage_IB"), 
           "Stage_I", 
           ifelse(pathologic_stage %in% c("Stage_IIA", "Stage_IIB", "Stage_IIC",
                                          "I/II_NOS"),
                  "Stage_II", 
                  ifelse(pathologic_stage %in% c( "Stage_IIIA",
                                                  "Stage_IIIB",
                                                  "Stage_IIIC"),
                         "Stage_III", ifelse(pathologic_stage %in% c( "Stage_IVA",
                                                                      "Stage_IVB",
                                                                      "Stage_IVC"),
                                             "Stage_IV", pathologic_stage))))))
    
  }
  
}

# Collect stages into one: 
if("clinical_stage" %in% colnames(df_pheno_of_interst)) {
  df_pheno_of_interst <- df_pheno_of_interst %>% 
    mutate(clinical_stage = case_when(clinical_stage %in% c("Stage_IA", 
                                                            "Stage_IA1",
                                                            "Stage_IA2",
                                                            "Stage_IB",
                                                            "Stage_IB1",
                                                            "Stage_IB2") ~ "Stage_I",
                                      clinical_stage %in% c("Stage_IIA", 
                                                            "Stage_IIA1",
                                                            "Stage_IIA2",
                                                            "Stage_IIB") ~ "Stage_II",
                                      clinical_stage %in% c("Stage_IIIA",
                                                            "Stage_IIIB") ~ "Stage_III",
                                      clinical_stage %in% c("Stage_IVA",
                                                            "Stage_IVB") ~ "Stage_IV"))
    
  
}


# Change tobacco smoking history scale to uncerstandable strings: 
if("tobacco_smoking_history" %in% colnames(df_pheno_of_interst)) {
  
  if (c_type == "CESC"){
    df_pheno_of_interst <- df_pheno_of_interst %>% 
      mutate(tobacco_smoking_history = factor(
        ifelse(tobacco_smoking_history == 1, 
           "Lifelong_NonSmoker", 
           ifelse(tobacco_smoking_history == 2,
                  "Current_smoker", 
                  ifelse(tobacco_smoking_history %in% c(3,4,5),
                         "Former_smoker", tobacco_smoking_history)))))
  } else {
    df_pheno_of_interst <- df_pheno_of_interst %>% 
      mutate(tobacco_smoking_history = factor(
        ifelse(tobacco_smoking_history == 1, 
           "Lifelong_NonSmoker", 
           ifelse(tobacco_smoking_history == 2,
                  "Current_smoker", 
                  ifelse(tobacco_smoking_history == 3,
                         "Former_smoker_more_than_15y", 
                         ifelse(tobacco_smoking_history == 4,
                                "Former_smoker_less_than_15y", 
                                ifelse(tobacco_smoking_history == 5,
                                       "Former_smoker_duration_na", 
                                       tobacco_smoking_history)))))))
  }
}

# Change percentage buckets to numbers using the mean: 
if("er_level_cell_percentage_category" %in% colnames(df_pheno_of_interst)) {
  df_pheno_of_interst <- df_pheno_of_interst %>% 
    mutate(er_level_cell_percentage_category = case_when(
      er_level_cell_percentage_category %in% c("<10%", "10-19%") ~ "<20%", 
      er_level_cell_percentage_category %in% c("20-29%", "30-39%")  ~ "20-39%",
      er_level_cell_percentage_category %in% c("40-49%", "50-59%") ~ "40-59%",
      er_level_cell_percentage_category %in% c("60-69%", "70-79%") ~ "60-79%",
      er_level_cell_percentage_category %in% c("80-89%", "90-99%") ~ "80-99%"
    ))
}

# Make eastern_cancer_oncology_group a character (factor) instead of "numeric" and group 0 and the rest: 
if("eastern_cancer_oncology_group" %in% colnames(df_pheno_of_interst)) {

  # List of other groups in ECOG not 0: 
  other_ecog <- df_pheno_of_interst[["eastern_cancer_oncology_group"]] %>% 
    na.omit() %>% unique() %>% as.numeric()
  
  other_ecog <- paste(other_ecog[other_ecog != 0], collapse = "_")
  
  df_pheno_of_interst <- df_pheno_of_interst %>% 
  mutate(eastern_cancer_oncology_group = 
           as.numeric(eastern_cancer_oncology_group)) %>% 
  mutate(eastern_cancer_oncology_group = 
           case_when(eastern_cancer_oncology_group == 0 ~ "group_0",
                     eastern_cancer_oncology_group > 0 ~
                       paste0("group_", other_ecog)))

}
#What do we do with ldh ? Bin it ? 
# Split LDH on median. Include in high. DLBC is too small to make 4 bins. 
if("ldh_level" %in% colnames(df_pheno_of_interst)){
  median_ldh <- df_pheno_of_interst[["ldh_level"]] %>% 
    as.numeric %>% median(na.rm = T)
  
  df_pheno_of_interst <- df_pheno_of_interst %>% 
    mutate(ldh_level = as.numeric(ldh_level)) %>% 
    mutate(ldh_level = ifelse(ldh_level < median_ldh, 
                              "Low", "High"))
}


# Karnifski score, LUSC. 0-40, 50-70, 80-100. High is reference (make sure levels know)
if("karnofsky_performance_score" %in% colnames(df_pheno_of_interst)) {
  df_pheno_of_interst <- df_pheno_of_interst %>% 
    mutate(karnofsky_performance_score = 
             case_when(karnofsky_performance_score %in% 
                         c("0", "10", "20", "30", "40") ~ "0_to_40",
                       karnofsky_performance_score %in% c("50", "60", "70") ~ 
                         "50_to_70", 
                        karnofsky_performance_score %in% c("80", "90", "100") ~ 
                         "80_to_100")
           )
  
  # karnofsky_performance order: 
  level_order_karnofsky_performance <- c("80_to_100", "50_to_70", "0_to_40") %>% 
    make.names
}


# Split ca_19_9_level (continuous) on median (included in high). Too few samples in CHOL to split into 4 (only in CHOL):
if("ca_19_9_level" %in% colnames(df_pheno_of_interst)){
  median_ca <- df_pheno_of_interst[["ca_19_9_level"]] %>% 
    as.numeric %>% median(na.rm = T)
  
  df_pheno_of_interst <- df_pheno_of_interst %>% 
    mutate(ca_19_9_level = as.numeric(ca_19_9_level)) %>% 
    mutate(ca_19_9_level = ifelse(ca_19_9_level < median_ca, 
                                  "Low", "High"))
  
}
```

```{r}
## Fixing data type, numeric, factor levels. 

####
# Convert columns to numeric (if possible)
df_pheno_of_interst <- df_pheno_of_interst %>% 
  rownames_to_column("sample_ID")

df_pheno_of_interst <- data.frame(lapply(df_pheno_of_interst, function(column) {
  # Check if the column is entirely numeric or if it contains any non-numeric characters
  if (all(!is.na(suppressWarnings(as.numeric(column)))) & !any(grepl("[^0-9.]", column))) {
    # If all elements can be converted to numeric without introducing NAs and do not have non-numeric characters
    as.numeric(column)
  } else {
    # Otherwise, keep as character
    as.character(column)
  }
}), stringsAsFactors = FALSE) %>% 
  column_to_rownames("sample_ID")
####

# Make all characters factors and fix names: 
df_pheno_of_interst <- df_pheno_of_interst %>% 
  mutate_if(is.character, ~ ifelse(is.na(.), NA, make.names(.))) %>% 
  mutate_if(is.character, as.factor)

top10_mutations <- make.names(top10_mutations)

### Change so WT is first level, and MUT is next in mutations  !
df_pheno_of_interst[top10_mutations] <- lapply(df_pheno_of_interst[top10_mutations], function(x) {
    if (is.factor(x)) {
        relevel(x, ref = "WT")
    } else {
        x  # If not a factor, leave as is
    }
})


# Extract column names having High or Low
cols_with_low_high <- names(df_pheno_of_interst)[sapply(df_pheno_of_interst, function(column) {
  unique_vals <- unique(na.omit(column))
  all(unique_vals %in% c("Low", "High")) && length(unique_vals) > 0
})]

# Change so Low is first level and High is next: 
df_pheno_of_interst[cols_with_low_high] <- lapply(df_pheno_of_interst[cols_with_low_high], function(x) {
    if (is.factor(x)) {
        relevel(x, ref = "Low")
    } else {
        x  # If not a factor, leave as is
    }
})


# Function used to determine two strings with "between X and Y" to know which should be second and thrid
max_in_char_list <- function(char_list) {
  
  char_list[which.max(sapply(char_list, function(x) {
    # Extract numbers using regular expressions
    nums <- as.numeric(unlist(regmatches(x, gregexpr("\\d+", x))))
    # Sum the extracted numbers
    sum(nums, na.rm = TRUE)
  }))]

}

# Change level order on breslow and age: 
if ("breslow_depth_value" %in% colnames(df_pheno_of_interst)){
  subgroups_breslow <- df_pheno_of_interst[["breslow_depth_value"]] %>% 
    na.omit() %>% 
    unique() 
  
  frst <- subgroups_breslow[grep("less",subgroups_breslow)]
  thrd <- max_in_char_list(subgroups_breslow[grep("between",subgroups_breslow)])
  frth <- subgroups_breslow[grep("more",subgroups_breslow)]
  scnd <- subgroups_breslow[!subgroups_breslow %in% c(frst, frth, thrd)]
  
  df_pheno_of_interst[["breslow_depth_value"]] <- factor(
    df_pheno_of_interst[["breslow_depth_value"]], 
    levels=c(frst, scnd, thrd, frth))
}

# Change level order on breslow and age: 
if ("number_pack_years_smoked" %in% colnames(df_pheno_of_interst)){
  subgroups_packyears <- df_pheno_of_interst[["number_pack_years_smoked"]] %>% 
    na.omit() %>% 
    unique() 
  
  frst <- subgroups_packyears[grep("less",subgroups_packyears)]
  thrd <- max_in_char_list(subgroups_packyears[grep("between",subgroups_packyears)])
  frth <- subgroups_packyears[grep("more",subgroups_packyears)]
  scnd <- subgroups_packyears[!subgroups_packyears %in% c(frst, frth, thrd)]
  
  df_pheno_of_interst[["number_pack_years_smoked"]] <- factor(
    df_pheno_of_interst[["number_pack_years_smoked"]], 
    levels=c(frst, scnd, thrd, frth))
}

if ("age_at_initial_pathologic_diagnosis" %in% colnames(df_pheno_of_interst)){
  subgroups_age <- df_pheno_of_interst[["age_at_initial_pathologic_diagnosis"]] %>%
    na.omit() %>% 
    unique() 
  
  frst <- subgroups_age[grep("less",subgroups_age)]
  thrd <- max_in_char_list(subgroups_age[grep("between",subgroups_age)])
  frth <- subgroups_age[grep("more",subgroups_age)]
  scnd <- subgroups_age[!subgroups_age %in% c(frst, frth, thrd)]
  
  df_pheno_of_interst[["age_at_initial_pathologic_diagnosis"]] <- factor(
    df_pheno_of_interst[["age_at_initial_pathologic_diagnosis"]], 
    levels=c(frst, scnd, thrd, frth))
}


if("karnofsky_performance_score" %in% colnames(df_pheno_of_interst)) {
  df_pheno_of_interst[["karnofsky_performance_score"]] <- factor(
    df_pheno_of_interst[["karnofsky_performance_score"]], 
    levels=level_order_karnofsky_performance)
}

if("tobacco_smoking_history" %in% colnames(df_pheno_of_interst)) {
  df_pheno_of_interst[["tobacco_smoking_history"]] <- factor(
    df_pheno_of_interst[["tobacco_smoking_history"]], 
    levels=c("Lifelong_NonSmoker",
             "Former_smoker_less_than_15y",
             "Former_smoker_duration_na",
             "Former_smoker_more_than_15y",
             "Current_smoker")
      )
}

```

## Limma workflow

(<https://www.bioconductor.org/packages/release/workflows/vignettes/RNAseq123/inst/doc/limmaWorkflow.html>)

<https://biocellgen-public.svi.edu.au/sahmri-bulk-rnaseq/processing.html#Questions>

### Setup DGEList object

```{r}

mat_exp_count_ctype <- df_expected_count[[c_type]] %>% 
  column_to_rownames("sample") %>% 
  as.matrix()

# Make a list of the phenotypes with at least two groups.
pheno_more_than_one_subtype <- df_pheno_of_interst %>% 
  summarise(across(everything(), ~ n_distinct(., na.rm = TRUE))) %>% 
  dplyr::select(where(~ . > 1)) %>%
  names()

# Filter phenotype table to only have the ones with at least 2 groups. 
df_pheno_of_interst <- df_pheno_of_interst %>% 
  dplyr::select(all_of(pheno_more_than_one_subtype))

# Create dge object: 
dge <- DGEList(counts = mat_exp_count_ctype, 
               samples = df_pheno_of_interst)


# I used to do calcNormFactors("TMM") here. But I think I need to do it later after filtering lowly expressed genes. And also, it is synonym to normLibSizes which I use in later step. https://support.bioconductor.org/p/9152808/ 

```

### Unsupervised clustering of samples

<https://bioconductor.org/packages/release/workflows/vignettes/RNAseq123/inst/doc/limmaWorkflow.html> (5.4)

Same as PCA ? (multidimensional scaling (MDS) plot)

```{r}
# Plotting PCA

#cpm(dge, log=TRUE) %>% as.data.frame()

#interesting_phenotype[[c_type]]

if(plot_mds){
  library(RColorBrewer)
    
    
  pca_analysis <- prcomp(t(cpm(dge, log=TRUE)))
  #summary(pca_analysis) 
  
  # Categoriacal values
  ggbiplot::ggbiplot(pca_analysis, 
                     groups = dge$samples$targeted_molecular_therapy, 
                     ellipse = TRUE,
                     var.axes = FALSE)
  
  # Numerical values
  ggbiplot::ggbiplot(pca_analysis, 
                     groups = dge$samples$maximum_tumor_dimension, 
                     ellipse = FALSE,
                     var.axes = FALSE)
  
  
  
  par(mfrow=c(1,2))
  group1 <- dge$samples$history_of_chronic_pancreatitis
  col.group1 <- group1
  levels(col.group1) <-  brewer.pal(nlevels(col.group1), "Set1")
  col.group1 <- as.character(col.group1)
  
  group2 <- dge$samples$radiation_therapy
  col.group2 <- group2
  levels(col.group2) <-  brewer.pal(nlevels(col.group2), "Set2")
  col.group2 <- as.character(col.group2)
  
  plotMDS(lcpm, labels=group1, col=col.group1)
  title(main="A. chronic pancreatitis")
  plotMDS(lcpm, labels=group2, col=col.group2, dim=c(3,4))
  title(main="B. radiation therapy")
}

```

### Differential expression analysis

Differential gene expression analysis is used to find genes that are significantly expressed in one group compared to another. limma-voom uses a moderated t-statistic, which has greater power than a normal t-test when applied to gene expression data. This is because the limma-voom t-statistic borrow information across genes for a gene expression dataset (using Bayesian statistics).

#### Univariate linear regression analysis with LIMMA

```{r}
#https://bioinformatics.stackexchange.com/questions/18570/generating-contrast-matrix-for-limma-in-loop 
## Function for making contrast matrices: 

make_all_contrasts <- function (group, delim="_vs_"){
  
  suppressMessages(require(limma))
  
  #/ ensure that group levels are unique 
  # Sort the categories so e.g. Stage I stage II are in right order: 
  #if ( setequal(unique(group), c("High", "Low")) | 
  #     setequal(unique(group), c("MUT", "WT"))){
  #  group <- group %>% levels %>% make.names
  #    #sort(unique(as.character(group)), decreasing = TRUE)
  #} else {
  #  group <- sort(unique(as.character(group))) %>% 
  #      make.names()
  #}
  
  group <- group %>% levels %>% make.names

  #/ make all combinations
  cb   <- combn(group, 2, FUN = function(x){paste0(x[2], "-", x[1])})
  
  #/ make contrasts
  contrasts<- limma::makeContrasts(contrasts=cb, levels=group)
  colnames(contrasts) <- gsub("-", delim, colnames(contrasts))
  
  return(contrasts)
}



is_all_numeric <- function(x) {
  x <- as.character(x)
  all(!is.na(suppressWarnings(as.numeric(x))))
}


```

```{r}
# Loop through all the interesting phenotypes to find significantly differentially expressed target genes in the different conditions: 


R_element_name <- ifelse(c_type == "SKCM", 
                         paste0(file_path_xenadata, 'limma_univariate/limma_univariate_', sub_ctype, '.RData'),
                          paste0(file_path_xenadata, 'limma_univariate/limma_univariate_', c_type, '.RData'))

if (!file.exists(R_element_name)){
  
  # Empty list to save table with logFC and p values all the phenotypes:
  list_df_logFC_pval <- list()
  
  phenos_to_test <- df_pheno_of_interst %>% colnames()
  
  
  for (x_pheno in phenos_to_test){
    print(x_pheno)
    rm(design_mat, contrasts_mat)
    
    # Empty list to save topTreat for each comparison: 
    list_comparisons <- list()
    
    # Index of samples without NA in phenotype 
    is_not_na_pheno <- !is.na(dge$samples[[x_pheno]] )
    
    # Filter out samples with NA in phenotype
    dge_filtered <- dge[,is_not_na_pheno,keep.lib.size=FALSE]
    
    # If at least two unique conditions/categories of this phenotype then run, otherwise skip.
   # if (length(unique(dge_filtered$samples[[x_pheno]])) > 1){
      
    # Find out if the current phenotype is continuous variable :
    if (is_all_numeric(dge_filtered$samples[[x_pheno]])){
      
      # Make numeric if possible (tested in if statement)
      dge_filtered$samples[[x_pheno]] <- dge_filtered$samples[[x_pheno]] %>% 
        as.numeric()
      
      design_mat <- model.matrix(~dge_filtered$samples[[x_pheno]])
      
      # Change name of second column to phenotype: 
      colnames(design_mat)[2] <- x_pheno
      
      # Filter out (more) low count genes, but make sure our target genes are kept:
      keep <- filterByExpr(dge_filtered, design = design_mat)
      keep[target_list] <- TRUE
  
      # Filter dge object to only contain samples from design matrix (NAs removed);
      #dge_filtered <- dge_filtered[keep, rownames(design_mat),keep.lib.size=FALSE]
      dge_filtered <- dge_filtered[keep, ,keep.lib.size=FALSE]
      dge_filtered <- normLibSizes(dge_filtered, method = "TMM")
      
      voomData <- voom(dge_filtered, design = design_mat, plot = F)
      vfit <- lmFit(voomData, design_mat)
      
      # Do not use trend=TRUE when I use voom. 
      # https://support.bioconductor.org/p/98201
      # ChatGPT suggest using voom for RNAseq data. 
      efit <- eBayes(vfit, trend = FALSE)
      
      list_df_logFC_pval[[x_pheno]] <- topTreat(efit, 
                                                adjust.method = "fdr",
                                                number = Inf,
                                                coef = x_pheno) %>%
        rownames_to_column("gene") %>% 
        filter(!str_detect(gene, "^ENSG")) %>% 
        mutate(phenotype = x_pheno,
               comparison = "continuous_linear_relations")
      
    } else {
      
      ### MAKE DESIGN AND CONTRAST MATRIX ##
      options(na.action='na.omit') # DO not include if only NAs
      design_mat <- model.matrix(as.formula(paste0("~0 + ", x_pheno)), 
                         data = dge_filtered$samples)
      
      # Make colnames of design matrix match rownames in contrast_mat: 
      new_colnames <- sub(paste0("^", x_pheno), "", colnames(design_mat))
      # Add X in front like the make_all_contrasts if numeric: 
      colnames(design_mat) <- make.names(new_colnames)
      
      # Make contrast matrix: 
      contrasts_mat <- make_all_contrasts(dge_filtered$samples[[x_pheno]])
      
      
      # Filter out (more) low count genes, but make sure our target genes are kept: 
      keep <- filterByExpr(dge_filtered, design = design_mat)
      keep[target_list] <- TRUE
      
      # Filter dge object to only contain samples from design matrix (NAs removed);
      dge_filtered <- dge_filtered[keep, 
                                   rownames(design_mat),keep.lib.size=FALSE]
      dge_filtered <- normLibSizes(dge_filtered)
      
      # Total number of samples included in analysis
      tot_sample_size <- ncol(dge_filtered)
      
      # Sample size of categories within this phenotype:
      df_cat_sample_size <- dge_filtered$samples[[x_pheno]] %>% 
        summary()
      
      voomData <- voom(dge_filtered, design = design_mat, plot = F)
      vfit <- lmFit(voomData, design_mat)
      cvfit <- contrasts.fit(vfit, contrast=contrasts_mat)
      
      # Do not use trend=TRUE when I use voom. 
      # https://support.bioconductor.org/p/98201
      # ChatGPT suggest using voom for RNAseq data. 
      efit <- eBayes(cvfit, trend = FALSE)
      
      # Loop all comparisons to get topTreat table for all for later plotting
      if (length(colnames(contrasts_mat)>1)){
        for (c in colnames(contrasts_mat)){
          list_comparisons[[c]] <- topTreat(efit, 
                    adjust.method = "fdr",
                    number = Inf,
                    coef = c) %>% 
              rownames_to_column("gene") %>% 
              filter(!str_detect(gene, "^ENSG")) %>% 
              mutate(phenotype = x_pheno,
                     comparison = c,
                     total_sample_size = tot_sample_size,
                     cat_sample_size = paste0(unlist(str_split(c, "_vs_"))[1],
                                              ":",
                                              df_cat_sample_size[[unlist(str_split(c, "_vs_"))[1]]], 
                                              ", ", 
                                              unlist(str_split(c, "_vs_"))[2], 
                                              ":", 
                                              df_cat_sample_size[[unlist(str_split(c, "_vs_"))[2]]]))
        }
        list_df_logFC_pval[[x_pheno]] <- list_comparisons %>% 
          bind_rows()
        
      } else {
          
        # Save table with logFC and p values: 
        list_df_logFC_pval[[x_pheno]] <- topTreat(efit, 
                adjust.method = "fdr",
                number = Inf) %>% 
          rownames_to_column("gene") %>% 
          filter(!str_detect(gene, "^ENSG")) %>% 
          mutate(phenotype = x_pheno, 
                comparison = colnames(contrasts_mat),
                total_sample_size = tot_sample_size)
      }
      
    }
      
 #   } else {
#      warning(paste(x_pheno, "has only one unique category after filtering!"))
 #   }
    
  }
  
  
  saveRDS(list_df_logFC_pval, file = R_element_name)
  
} else {
  
  list_df_logFC_pval <- readRDS(R_element_name)
  
}

```

#### Results of univariate analysis

```{r}
## FUNCTIONS
# Function that will detect if any of two categories has sample size < than allowed
# NB! If min_sample_size is 10, it will return LOW if any subgroup sample size is 10. Meaning it is only included if >min_sample_size
#test_if_exceeds_min_sample_size("YES:6, NO:89",5)
test_if_exceeds_min_sample_size <- function(sample_size_string,
                                            min_sample_size){
  
  # Check for NA input
  if (is.na(sample_size_string)) {
    return("continuous_no_low")  # Or another placeholder if needed
  }
  
  list_sizes <- str_extract_all(sample_size_string, "(?<=:)\\d+") %>% 
    unlist() %>% 
    as.numeric()
  
  if (sum(list_sizes > min_sample_size) < 2){
    return("LOW")
  } else {
    return(paste0("min value = ", min(list_sizes)))
  }

}

contains_numbers <- function(phrase) {
    grepl("\\d", phrase)
}

####
# Function used for formatting age or breslow for plots: 
use_bigger_smaller_signs <- function(input_str) {
  # Function to convert phrases to comparison symbols
  convert_phrase <- function(phrase) {
    
    suffix <- sub(".*:(\\d+)$", "\\1", phrase)
    phrase <- sub(":\\d+$", "", phrase)
    
    # Preserve prefix (e.g., "Former_smoker")
    prefix <- ifelse(grepl("smoker", phrase),
                     sub("(_less_than_.*|_more_than_.*)", "", phrase),
                     "")
    
    # Handle "less_than"
    if (grepl("less_than_(\\d+)", phrase)) {
      num <- as.numeric(sub(".*less_than_(\\d+).*", "\\1", phrase))
      res <- paste0("<", num)
      # Handle "more_than"
    } else if (grepl("more_than_or_eq_(\\d+)", phrase)) {
      num <- as.numeric(sub("more_than_or_eq_(\\d+)", "\\1", phrase))
      res <- paste0("≥", num)
      # Handle "between_x_incl._and_y_excl."
    } else if (grepl("more_than_(\\d+)", phrase)) {
      num <- as.numeric(sub(".*more_than_(\\d+).*", "\\1", phrase))
      res <- paste0(">", num)
      # Handle "between_x_incl._and_y_excl."
    } else if (grepl("between_(\\d+)_.incl._and_(\\d+)_.excl.", phrase)) {
      nums <- as.numeric(unlist(regmatches(phrase, gregexpr("\\d+", phrase))))
      res <- paste0(nums[1], "-", nums[2]-1)
    } else {
      res <- phrase
    }

    # Reattach prefix if it exists and add y
    if (prefix != "" & contains_numbers(phrase)) {
        res <- paste0(prefix, "_", res, "y")
    }
    
    # Add the suffix back if it was present
    if (suffix != phrase) {
        res <- paste0(res, ":", suffix)
    }

    # If no match is found, return the original phrase
    return(res)
  }
  
  if (grepl("_vs_", input_str)){
    # Split input string into parts using "_vs_" as a delimiter
    parts <- strsplit(input_str, "_vs_")[[1]]
    
    # Convert each part and join them with " vs " separator
    converted_parts <- sapply(parts, convert_phrase)
    return(paste(converted_parts, collapse = " vs "))
  } else if (grepl(", ", input_str)){
    parts <- strsplit(input_str, ", ")[[1]]
    
    # Convert each part and join them with " vs " separator
    converted_parts <- sapply(parts, convert_phrase)
    return(paste(converted_parts, collapse = ", "))
  }

}


####
# Function making first letter capital: 
firstup <- function(x) {
  substr(x, 1, 1) <- toupper(substr(x, 1, 1))
  x
}
```

```{r}

# Add Low value to ALL comparisons:
full_table_w_low <- list_df_logFC_pval %>% 
  bind_rows() %>% 
  mutate(sample_sizes_limit = mapply(test_if_exceeds_min_sample_size, 
                              cat_sample_size,
                              min_sample_size))

# Table with conditions with at least one gene is significant after mutliple adjusting (adjusted P value)
table_w_adjP_sig <- full_table_w_low %>% 
  unite(condition, c(phenotype, comparison), sep = "_", remove = FALSE) %>% 
  group_by(condition) %>% 
  filter(any(P.Value < 0.05)) %>% 
  ungroup()

```

##### Heatmap

```{r}
### MAKE text size in plot. 


# Number of significant phenotypes: 
sig_comparison_list <- table_w_adjP_sig %>% 
  filter(!grepl("cellfrac", phenotype)) %>% 
  filter(sample_sizes_limit != "LOW") %>% 
  dplyr::select(comparison) %>% unique()

if (c_type == "BRCA" & nrow(sig_comparison_list) > 29){
  txt_axis_size <- 2
  star_size <- 1
  title_size <- 4.5
  subtitle_size <- 4
  legend_txt_size <- subtitle_size
  legend_size <- 2
} else if (nrow(sig_comparison_list) > 25){
  txt_axis_size <- 2
  star_size <- 1
  title_size <- 5
  subtitle_size <- title_size+0
  legend_txt_size <- subtitle_size
  legend_size <- 2
} else if (nrow(sig_comparison_list) > 20){
  txt_axis_size <- 5
  star_size <- 2
  title_size <- 9
  subtitle_size <- title_size+0
  legend_txt_size <- subtitle_size
  legend_size <- 3
} else if (c_type %in% c("SKCM", "CESC") & nrow(sig_comparison_list) > 16){
  txt_axis_size <- 3
  star_size <- 1
  title_size <- 5
  subtitle_size <- title_size+0
  legend_txt_size <- subtitle_size
  legend_size <- 3
} else if (c_type %in% c("PAAD", "HNSC") & nrow(sig_comparison_list) > 14){
  txt_axis_size <- ifelse(c_type == "PAAD", 3, 3.5)
  star_size <- 1.5
  title_size <- 7
  subtitle_size <- title_size+0
  legend_txt_size <- subtitle_size
  legend_size <- 3
} else if (c_type == "SKCM" & nrow(sig_comparison_list) > 10){
  txt_axis_size <- 5
  star_size <- 2
  title_size <- 7
  subtitle_size <- title_size+0
  legend_txt_size <- subtitle_size
  legend_size <- 3
} else {
  txt_axis_size <- 8
  star_size <- 3
  title_size <- 12
  subtitle_size <- title_size+0
  legend_txt_size <- subtitle_size
  legend_size <- 6
}
```

```{r}
# Plot with correct y-axis coloring
# Change the names for the plot: 
table_w_adjP_sig %>% 
  filter(!grepl("cellfrac", phenotype)) %>% 
  mutate(phenotype = ifelse(grepl("mut_", phenotype), 
                              paste(gsub("mut_", "", phenotype), "mutation"), 
                              rename_phenotype[phenotype])) %>% 
  rowwise() %>% 
  # Change age to use symbols: 
  mutate(comparison = ifelse(phenotype == "Age at Diagnosis" | 
                               grepl("breslow", str_to_lower(phenotype)) |
                               grepl("pack years", str_to_lower(phenotype)) |
                               grepl("tobacco smoking", str_to_lower(phenotype)),
                             use_bigger_smaller_signs(comparison),
                             comparison)) %>%
 mutate(comparison = ifelse(phenotype == "Karnofsky Performance Score",
                             gsub("X", "", comparison),
                             comparison)) %>%
  mutate(condition_plot = ifelse(comparison == "continuous_linear_relations" |
                                   grepl("MUT", comparison), 
                                 paste0(phenotype), 
                                 paste0(phenotype, ":\n", comparison))) %>% 
  mutate(condition_plot = ifelse(nchar(comparison)>50, 
                                 gsub("_vs_", "_vs\n", condition_plot),
                                 condition_plot)) %>% 
  mutate(condition_plot = gsub("\\.", " ", condition_plot)) %>% 
  mutate(condition_plot = gsub("_", " ", condition_plot)) %>% 
  # Remove if condition is LOW: 
  filter(sample_sizes_limit != "LOW") %>% 
  mutate(significance = case_when(
    P.Value < 0.001 ~ "***",
    P.Value < 0.01  ~ "**",
    P.Value < 0.05  ~ "*",
    TRUE              ~ "")) %>% 
  ggplot(aes(x = gene, y = condition_plot, fill = logFC)) +
  geom_tile() + 
  geom_text(aes(label = significance), color = "black", size = star_size) + 
  scale_fill_gradient2(low = "blue4", mid = "white", high = "red4", midpoint = 0) +
  theme_minimal() +
  theme(axis.text.x = element_text(size = txt_axis_size, 
                                   angle = 30,
                                   vjust = 0.75),
    axis.text.y = element_text(size = txt_axis_size),
    axis.title = element_blank(),
    title = element_text(size=title_size),
    plot.subtitle =  element_text(size=subtitle_size),
    legend.title = element_text(size = legend_txt_size),
    legend.text = element_text(size = legend_txt_size-2),
    legend.key.size = unit(legend_size, "mm")
  ) +
  ggtitle(ifelse(c_type == "SKCM",
                 paste0("Limma univariate analysis of ", c_type, 
                        " (", gsub("SKCM_", "",sub_ctype), ")"),
                 paste0("Limma univariate analysis of ", c_type))) +
  labs(subtitle = "Phenotypes") + 
  coord_fixed() # Make sure tiles are square

ggsave(filename = ifelse(c_type == "SKCM",
                  paste0(path_save_plots, 
                  "heatmap_univariate_phenotypes_",
                  c_type, "_", gsub("SKCM_", "",sub_ctype),
                  ".pdf"),
                  paste0(path_save_plots, 
                  "heatmap_univariate_phenotypes_",
                  c_type, 
                  ".pdf")),
       device = cairo_pdf)




## Heat map for cell fractions: 

# Plot with correct y-axis coloring
# Change the names for the plot: 
table_w_adjP_sig %>% 
  filter(grepl("cellfrac", phenotype),
         !grepl("uncharacterized", phenotype)) %>% 
  mutate(phenotype = gsub("cellfrac_", "", phenotype)) %>%  
  mutate(phenotype = gsub("\\.\\.\\.", " - ", phenotype)) %>% 
  mutate(phenotype = gsub("\\.", " ", phenotype)) %>% 
  mutate(phenotype = gsub("Tregs", "", phenotype)) %>%
  mutate(phenotype = sub("\\s+$", "", phenotype)) %>% 
  mutate(condition_plot = paste0(phenotype, ":\n", comparison)) %>% 
  mutate(condition_plot = ifelse(nchar(comparison)>50, 
                                 gsub("_vs_", "_vs\n", condition_plot),
                                 condition_plot)) %>% 
  mutate(condition_plot = gsub("_", " ", condition_plot)) %>% 
  # Remove if condition is LOW: 
  filter(sample_sizes_limit != "LOW") %>% 
  mutate(significance = case_when(
    P.Value < 0.001 ~ "***",
    P.Value < 0.01  ~ "**",
    P.Value < 0.05  ~ "*",
    TRUE              ~ "")) %>% 
  ggplot(aes(x = gene, y = condition_plot, fill = logFC)) +
  geom_tile() + 
  geom_text(aes(label = significance), color = "black", size = 3) + 
  scale_fill_gradient2(low = "blue4", mid = "white", high = "red4", midpoint = 0) +
  theme_minimal() +
  theme(axis.text.x = element_text(size = 8, 
                                   angle = 30,
                                   vjust = 0.75),
    axis.text.y = element_text(size = 8),
    axis.title = element_blank(),
    title = element_text(size=15)
  ) +
  ggtitle(ifelse(c_type == "SKCM",
                 paste0("Limma univariate analysis of ", c_type, 
                        " (", gsub("SKCM_", "",sub_ctype), ")"),
                 paste0("Limma univariate analysis of ", c_type))) +
  labs(subtitle = "Cell fractions") + 
  coord_fixed() # Make sure tiles are square

ggsave(filename = ifelse(c_type == "SKCM",
                  paste0(path_save_plots, 
                  "heatmap_univariate_cellfrac_",
                  sub_ctype,
                  ".pdf"),
                  paste0(path_save_plots, 
                  "heatmap_univariate_cellfrac_",
                  c_type, 
                  ".pdf")),
       device = cairo_pdf)

```

##### LINEAR PLOT OF continuous PHENOTYPE

```{r}
list_of_linear_plots <- list()

continuous_sig_phenos <- table_w_adjP_sig %>% 
  filter(comparison == "continuous_linear_relations") %>% 
  dplyr::select(phenotype) %>% 
  unique() %>% unlist(use.names = F)

if (length(continuous_sig_phenos) > 0){
  
  for (x_pheno in continuous_sig_phenos){
    # Find all genes which are significantly expressed in this phenotype
    continuous_sig_genes <- table_w_adjP_sig %>% 
      filter(phenotype == x_pheno,
             P.Value < 0.05) %>% 
      dplyr::select(gene) %>% 
      unique() %>% unlist(use.names = F)
    
    ####
    # Index of samples without NA in phenotype 
    is_not_na_pheno <- !is.na(dge$samples[[x_pheno]] )
    
    # Filter out samples with NA in phenotype
    dge_filtered <- dge[,is_not_na_pheno,keep.lib.size=FALSE]
    
    # Filter the dge data again like in univariate analysis: 
    dge_filtered$samples[[x_pheno]] <- dge_filtered$samples[[x_pheno]] %>% 
      as.numeric()
    
    design_mat <- model.matrix(~dge_filtered$samples[[x_pheno]])
    
    # Change name of second column to phenotype: 
    colnames(design_mat)[2] <- x_pheno
    
    # Filter out (more) low count genes, but make sure our target genes are kept: 
    keep <- filterByExpr(dge_filtered, design_mat)
    keep[target_list] <- TRUE
  
    # Filter dge object to only contain samples from design matrix (NAs removed);
    #dge_filtered <- dge_filtered[keep, rownames(design_mat),keep.lib.size=FALSE]
    dge_filtered <- dge_filtered[keep, ,keep.lib.size=FALSE]
    dge_filtered <- normLibSizes(dge_filtered)
          
    voomData <- voom(dge_filtered, design = design_mat, plot = F)
          
    # loop all genes showing significant regulation for this phenotype: 
    for (x_gene in continuous_sig_genes){
      cont_pheno_gene <- tibble(phenotype = dge_filtered$samples[[x_pheno]],
                                gene = voomData$E[x_gene,]) %>% 
        mutate(phenotype = as.numeric(phenotype))
    
      model <- lm(gene ~ phenotype, data = cont_pheno_gene)
      r_squared <- summary(model)$r.squared
      
      plot_name <- paste0(x_pheno, "_", x_gene)
      
      list_of_linear_plots[[plot_name]] <- cont_pheno_gene %>% 
        ggplot(aes(x = phenotype, 
                   y = gene)) +
        geom_point() +
        scale_fill_viridis_d() +
        geom_smooth(method = "lm", color = "blue", se = TRUE) +
        labs(title = paste("Expression of", x_gene, "vs", x_pheno),
             x = x_pheno,
             y = paste("Expression of", x_gene)) +
        annotate("text", x = max(cont_pheno_gene$phenotype, na.rm = TRUE), 
                 y = max(cont_pheno_gene$gene, na.rm = TRUE), 
                 label = paste("R² =", round(r_squared, 3)),
                 hjust = 1, vjust = 1)
      
      
    }  
    
  }
  
  list_of_linear_plots
  
}


```

## Multivariate limma

<https://bioconductor.org/packages/release/workflows/vignettes/RNAseq123/inst/doc/designmatrices.html>

```{r}
# Define how stringent the lasso regression feature selection should be in the case all phenotypes are shrunk to 0! Be careful not to include too many, since the design_matrix will end up having low rank again then. 
lasso_min_phenos_to_incl <- 1
```

```{r}
# Filter dge to only contain samples that have data for all the significant phenotypes:

# Get significant phenotypes from univariate analysis: 
sig_phenotypes_univariate <- table_w_adjP_sig %>% 
  filter(sample_sizes_limit != "LOW") %>% 
  dplyr::select(phenotype) %>% 
  unique() %>% 
  unlist(use.names = F)


# They are already factor in dge$samples[sig_phenotypes_univariate]

# Create an index of samples (rows) where all specified phenotypes are NOT NA
is_not_na_pheno <- rowSums(is.na(dge$samples[, sig_phenotypes_univariate])) == 0

# Filter out samples with NA in any of significant phenotypes 
# SARAH does the same in the survival multivaraite analysis
dge_filtered <- dge[,is_not_na_pheno,keep.lib.size=FALSE] 
#Downstream error in filterByExpr when keep.lib.size=FALSE

# Check which columns in dge_filtered$samples contain only one unique value
#single_value_columns <- sapply(dge_filtered$samples, function(x) length(unique(x)) == 1)

# Remove these columns from the samples data
#dge_filtered$samples <- dge_filtered$samples[, !single_value_columns]

# Update list with 
#sig_phenotypes_univariate <- sig_phenotypes_univariate[sig_phenotypes_univariate %in% colnames(dge_filtered$samples)]
```

```{r}
# Function to ensure both "mut_*WT" and "mut_*MUT" for each "mut" element
ensure_mut_pairs <- function(phenotype_list) {
  unlist(lapply(phenotype_list, function(pheno) {
    if (grepl("mut", pheno)) {
      base_name <- sub("(mut_.*)(WT|MUT)$", "\\1", pheno)
      return(c(pheno, paste0(base_name, "WT"), paste0(base_name, "MUT")))
    }
    return(pheno)
  }))
}
```

```{r}

# List of sample size of categories within each phenotype comparison:
df_cat_sample_size_list <- list()
was_low_rank <- FALSE

if (length(sig_phenotypes_univariate) > 0){
  
  design_mat2 <- model.matrix(as.formula(paste0("~ 0 +", 
                                                paste(sig_phenotypes_univariate,
                                                      collapse = " + "))),
                              data = dge_filtered$samples)
  
  # if two or more of the variables are linear dependent, 
  # rank (qr(design_mat)$rank) < ncol(design_mat)
  # Check if the design matrix has full rank (no multicollinearity issues)
  if (qr(design_mat2)$rank < ncol(design_mat2)) {
      print("Design matrix is not of full rank. Doing Lasso Regression to remove phenotypes of low importance (coefficient = 0).")
      # If qr(design_mat2)$rank < ncol(design_mat2) then use lasso or ridge regression to address multicollinearity and variable selection in regression models. 
    # Lasso can shrink some to 0, while Ridge cannot. 
    # If you believe that all variables have some contribution, Ridge is more suitable as it shrinks coefficients but does not eliminate them.
    # You want variable selection: Lasso can shrink some coefficients to zero, making it easier to interpret which variables are significant.
    
    
    # Ensure X is your design matrix
    X <- as.matrix(dge_filtered$samples[,sig_phenotypes_univariate])  # Design matrix: n_samples x n_features
    
    # Remove the contineous phenotypes. 
    X_categorical <- X[ , !(colnames(X) %in% continuous_sig_phenos)] %>% 
      as.data.frame() %>% 
      mutate_if(is.character, as.factor)
    
    X_categorical2 <- model.matrix(as.formula(paste0("~ 0 +", 
                                                     paste(colnames(X_categorical),
                                                           collapse = " + "))), 
                      data = X_categorical)
    
    # Merge the dummy encoded (X_categorical2) and contineous phenotypes:
    cont_X <- X[,continuous_sig_phenos] %>% as.data.frame()
    cat_X <- as.data.frame(X_categorical2)
    
    merged_X <- merge(cont_X, cat_X, by = "row.names", all=TRUE) %>% 
      column_to_rownames("Row.names") %>% 
      as.matrix()
    
    ## NB!! Using only target genes here
    # Ensure y is your gene expression data in the correct shape
    y <- t(as.matrix(dge_filtered$counts[target_list,]))  # Expression data: n_samples x n_genes
    
    cv_lasso <- cv.glmnet(merged_X, y, alpha = 1, family = "mgaussian")
    
    # See if there is at least 2 non-zero coefficients (one is intercept):
    nonzero_min_lambda <- cv_lasso$nzero[cv_lasso$lambda == cv_lasso$lambda.min]
    
    # If less than 2, use a less stringent lambda allowing more. 
    if (nonzero_min_lambda < 2){
      warning(paste("All phenotypes shrink to coef=0 in Lasso Regression. Therefore a less stringent lambda will be used to make coefficients allowing", lasso_min_phenos_to_incl, "phenotypes to be non-zero. "))
      
       # Find the index of the lambda.min
      lambda_min_index <- which(cv_lasso$lambda == cv_lasso$lambda.min)
      
      # Find the lambda closest to lambda.min with at least lasso_min_phenos_to_incl non-zero coefficients
      lambda_index <- which(cv_lasso$nzero > lasso_min_phenos_to_incl & cv_lasso$lambda < cv_lasso$lambda[lambda_min_index])[1]
      
      # If no lambda satisfies the condition, fall back to lambda.min
      if (is.na(lambda_index)) {
          warning(paste("No lambda with at least", lasso_min_phenos_to_incl, "non-zero coefficients found. Using lambda.min."))
          optimal_lambda <- cv_lasso$lambda.min
      } else {
          optimal_lambda <- cv_lasso$lambda[lambda_index]
      }

    } else {
      optimal_lambda <- cv_lasso$lambda.min 
    }
    
    # Make predictions and coefficients: 
    lasso_coefficients <- coef(cv_lasso, s = optimal_lambda)
    #predictions <- predict(cv_lasso, s = "lambda.min", newx = merged_X)
    
    # Extract important phenotypes (non-zero): 
    important_phenos <- list()
    for (t_gene in target_list){
      
      tmp_pheno_list <- lasso_coefficients[[t_gene]] %>% 
        as.matrix() %>% 
        as.data.frame() %>% 
        dplyr::rename(coef = 1) %>% 
        rownames_to_column("phenotype") %>% 
        filter(coef != 0,
               phenotype != "(Intercept)") %>% 
        dplyr::select(phenotype) %>% 
        unlist(use.names = F)
      
      
      important_phenos <- c(important_phenos, tmp_pheno_list)
      
      
    }
    important_phenos <- important_phenos %>% unlist() %>% unique()
   
    # Make sure it contains but mut_*WT and mut_*MUT : 
    important_phenos <- unique(ensure_mut_pairs(important_phenos))
    
    #Extract phenotypes wihtout category:
    tmp_index <- list()
    for (imp_pheno in important_phenos){
      tmp_index <- c(tmp_index, 
                     which(stri_detect_fixed(imp_pheno,
                                             sig_phenotypes_univariate))
                     )
    }
    
    tmp_index <- tmp_index %>% 
      unlist() %>% 
      unique()
    
    important_phenos_2 <- sig_phenotypes_univariate[tmp_index]
    
    if (!length(important_phenos_2) == 0){
      design_mat2 <- model.matrix(as.formula(paste0("~ 0 +", 
                                                paste(important_phenos_2,
                                                      collapse = " + "))),
                                data = dge_filtered$samples)
     
      
      
       # If only one important phenotype subcategory, the design matrix must be "wrangled" to the right format: 
      if (length(important_phenos) == 1){
        design_mat2 <- design_mat2[,intersect(colnames(design_mat2), 
                                              important_phenos)] %>% 
          as.matrix()
        
        colnames(design_mat2) <- important_phenos
        
      } else {
        # Keep only the columns (conditions) that are found important by Lasso: 
        design_mat2 <- design_mat2[,intersect(colnames(design_mat2), 
                                              important_phenos)]
      }
      
      
      
      if (qr(design_mat2)$rank < ncol(matrix(design_mat2))) {
        stop("Design matrix is STILL not of full rank after Lasso regression")
      }
      
      was_low_rank <- TRUE
      
     
    } else  {
      
      stop("No phenotypes have non-zero coefficients after doing Lasso Regression.")
      
    }
    
    
  }
  
  
  ### FILTER DATA using the design matrix: 
  # Filter out (more) low count genes, but make sure our target genes are kept: 
  keep <- filterByExpr(dge_filtered, design = design_mat2)
  keep[target_list] <- TRUE
  
  # Filter dge object to only contain samples from design matrix (NAs removed);
  #dge_filtered <- dge_filtered[keep, rownames(design_mat),keep.lib.size=FALSE]
  dge_filtered <- dge_filtered[keep, ,keep.lib.size=FALSE]
  dge_filtered <- normLibSizes(dge_filtered)
      
  # Total number of samples included in analysis
  tot_sample_size <- ncol(dge_filtered)
  
  voomData <- voom(dge_filtered, design = design_mat2, plot = F)
  vfit <- lmFit(voomData, design_mat2)
  
  
  # Build the contrasts matrix and include the category sample sizes:
  if (was_low_rank){
    
    # Make contrast matrix: 
    # Build contrast list : 
    contrastsx <- list()
    for (x_pheno in important_phenos_2){
      design_mat_levels <- colnames(design_mat2)[grepl(x_pheno, 
                                                       colnames(design_mat2))]
       
      # Sample size of categories within this phenotype:
      df_cat_sample_size_list[[x_pheno]] <- dge_filtered$samples[[x_pheno]] %>% 
        summary() %>% 
        as.data.frame() %>% 
        rownames_to_column("cat") %>% 
        mutate(phenotype = x_pheno) %>% 
        dplyr::rename(sample_size = ".")
  
       if (length(design_mat_levels) > 1){
         contrastsx <- append(contrastsx,
                       combn(design_mat_levels, 2,
                             FUN = function(x){paste0(x[2],
                                                      "-",
                                                      x[1])})) %>%
           unlist()
        
       } else {
         contrastsx <- append(contrastsx, 
                           design_mat_levels)
       }
        
    }
  
  } else {
    
    # IF not a rank problem, just make contrasts matrix for all significant phenotypes: 
    
    # Build contrast list : 
    contrastsx <- list()
    for (x_pheno in sig_phenotypes_univariate){
      
      n_total_levels <- length(levels(dge_filtered$samples[[x_pheno]]))
      all_levels <- paste(x_pheno, levels(dge_filtered$samples[[x_pheno]]), sep = "")
      design_mat_levels <- colnames(design_mat2)[grepl(x_pheno, colnames(design_mat2))]
      
      # Sample size of categories within this phenotype:
      df_cat_sample_size_list[[x_pheno]] <- dge_filtered$samples[[x_pheno]] %>% 
        summary() %>% 
        as.data.frame() %>% 
        rownames_to_column("cat") %>% 
        mutate(phenotype = x_pheno) %>% 
        dplyr::rename(sample_size = ".")
      
      # If more than one level, compare using combn: 
      if (length(design_mat_levels) > 1){
        contrastsx <- append(contrastsx,
                             combn(design_mat_levels, 2, FUN = function(x){paste0(x[2], "-", x[1])})) %>% 
          unlist()
        
        # If baseline not included in design_mat contrasts, add a line for comparing to baseline in contrast mat. 
        if (n_total_levels > length(design_mat_levels)){
          for (level_x in all_levels[all_levels %in% design_mat_levels])
           contrastsx <- append(contrastsx,
                                level_x)
        }
      } else {
        contrastsx <- append(contrastsx, 
                             design_mat_levels)
      }
    
    }
  }
  
  
  # Sample size of categories within this phenotype:
  df_cat_sample_size <- df_cat_sample_size_list %>% 
    bind_rows()
  
  # Build contrasts matrix: 
  prestr = "makeContrasts("
  poststr = ",levels=design_mat2)"
  
  astr = paste(contrastsx, collapse=", ")
  commandstr <- paste0(prestr, astr, poststr)
  contrasts_mat <- eval(parse(text=commandstr))
  
  
  # Fit contrasts matrix to fit
  cvfit <- contrasts.fit(vfit, contrasts = contrasts_mat)
  
  # Do not use trend=TRUE when I use voom. 
  # https://support.bioconductor.org/p/98201
  # ChatGPT suggest using voom for RNAseq data. 
  efit <- eBayes(cvfit, trend = FALSE)
  
  multivariate_comparison <- list()
  multivariate_results <- list()
  
  if (length(colnames(contrasts_mat))>1){
        for (c in colnames(contrasts_mat)){
          multivariate_comparison[[c]] <- topTreat(efit, 
                    adjust.method = "fdr",
                    number = Inf,
                   coef = c) %>% 
              rownames_to_column("gene") %>% 
              filter(!str_detect(gene, "^ENSG")) %>% 
              mutate(comparison = c,
                     total_sample_size = tot_sample_size)
        }
        multivariate_results <- multivariate_comparison %>% 
          bind_rows()
        
  } else if (length(colnames(contrasts_mat))==1) {
    multivariate_results <- topTreat(efit, 
                    adjust.method = "fdr",
                    number = Inf, 
                    coef = colnames(contrasts_mat)) %>% 
              rownames_to_column("gene") %>% 
              filter(!str_detect(gene, "^ENSG")) %>% 
              mutate(comparison = colnames(contrasts_mat),
                     total_sample_size = tot_sample_size)
    
  }
  multivariate_results
  
} else {
  warning("No significant phenotypes with enough samples in subtypes")
}

```

### Wrangling

```{r}
## FUNCTION
# From the comparison string get phenotype and sample size of each catagory within the comparison: 
# And return also if limit. (LOW) 
get_phenotype_samplestr <- function(comparison, df, min_sam_size = min_sample_size) {
  str_list <- str_split(comparison, " - ") %>% 
    unlist()
  
  phenotype_list <- unique(df$phenotype)
  x_phenotype <- phenotype_list[str_detect(str_list[1], phenotype_list)]
  
  str_list_2 <- gsub(x_phenotype, "", comparison) %>% 
    str_split(" - ") %>% 
    unlist()
  
  frst_samplesize <- df %>% 
    filter(phenotype == x_phenotype, 
           cat == str_list_2[1]) %>% 
    dplyr::select(sample_size) %>% 
    unlist(use.names = F)
  
  subgroup_list <- levels(dge_filtered$samples[[x_phenotype]])
  
  # If comparison only has one. 
  if (length(str_list_2) < 2){
    scnd_cat <- subgroup_list[subgroup_list != str_list_2]
    
    scnd_samplesize <- df %>% 
      filter(phenotype == x_phenotype,
             cat %in% scnd_cat) %>% 
      dplyr::select(sample_size) %>% 
      sum()
    
  } else {
    scnd_samplesize <- df %>% 
      filter(phenotype == x_phenotype,
             cat == str_list_2[2]) %>% 
      dplyr::select(sample_size) %>% 
      unlist(use.names = F)
    
    scnd_cat <- str_list_2[2]
  }
  
  sample_size_str <- paste0(str_list_2[1], ":", frst_samplesize, ", ", 
                            scnd_cat, ":", scnd_samplesize)
  
  # If any are below limit:
  if (frst_samplesize < min_sam_size | scnd_samplesize < min_sam_size){
    sample_size_limit <- "LOW"
  } else {
    sample_size_limit <- paste("min value =", min(c(frst_samplesize, scnd_samplesize)))
  }
  
  return(c(x_phenotype, sample_size_str, sample_size_limit))
}

```

```{r}
# Add category sample size to mutlivariate result table and phenotype and low if limit: 
multivariate_results <- multivariate_results %>% 
  rowwise() %>% 
  mutate(phenotype = get_phenotype_samplestr(comparison, 
                                             df_cat_sample_size)[1],
         cat_sample_size = get_phenotype_samplestr(comparison, 
                                                   df_cat_sample_size)[2],
         sample_sizes_limit = get_phenotype_samplestr(comparison, df_cat_sample_size)[3])  
```

```{r}
# More wrangling:
##
multivariate_results_2 <- multivariate_results %>% 
  # Change comparison to be same format as for univariate 
  mutate(comparison = comparison %>%
      str_replace_all(phenotype, "") %>% # Remove phenotype prefix
      str_replace_all(" - ", "_vs_")            # Replace '-' with '_vs_'
  )


# Add baseline to comparison: 
multivariate_results_2 <- multivariate_results_2 %>%
  rowwise() %>%
  mutate(
    comparison = ifelse(
      !grepl("_vs_", comparison) & phenotype %in% colnames(dge_filtered$samples),
      paste0(comparison, "_vs_", levels(dge_filtered$samples[[phenotype]])[1]),
      comparison
    )
  ) %>%
  ungroup()

# Table with conditions with at least one gene is significant:
multivariate_w_adjP_sig <- multivariate_results_2 %>% 
  unite(condition, c(phenotype, comparison), sep = "_", remove = FALSE) %>% 
  group_by(condition) %>% 
  filter(any(P.Value < 0.05)) %>% 
  ungroup()

multivariate_w_adjP_sig

# List of phenotypes significant in multivariate analysis
sig_phenotypes_multivariate <- multivariate_w_adjP_sig %>% 
  dplyr::select(phenotype) %>% 
  unique() %>% 
  unlist(use.names = F)
```

### Lasso data

```{r}
### NB! This the importance of the phenotypes in relation to up or downregulation of genes determined by Lasso Regression (cross validation). Does not have any information about significance or adjusted for multiple testing (FDR) like Limma.  

if (exists("lasso_coefficients")){
    
  list_lasso <- list()
  for (x_gene in names(lasso_coefficients)){
    list_lasso[[x_gene]] <- lasso_coefficients[[x_gene]] %>% 
      as.matrix() %>% 
      as.data.frame() %>% 
      rownames_to_column("condition") %>% 
      dplyr::rename(lasso_coefficient = "1") %>% 
      filter(condition != ".") %>% 
      mutate(gene = x_gene)
  }
  
  lasso_coeff_table <- list_lasso %>% 
    bind_rows()
  
  lasso_coeff_table %>% 
    filter(lasso_coefficient != 0) %>% 
    pivot_wider(id_cols = condition,
                names_from = gene, 
                values_from = lasso_coefficient)
}

```

### Heatmap

```{r}
# Make text sizes:

# Number of significant phenotypes: 
sig_comparison_multi_list <- multivariate_w_adjP_sig %>% 
  filter(!grepl("cellfrac", phenotype)) %>% 
  filter(sample_sizes_limit != "LOW") %>% 
  dplyr::select(comparison) %>% unique()

if (nrow(sig_comparison_multi_list) > 20){
  txt_axis_size <- 3
  star_size <- 1.5
  title_size <- 6
  subtitle_size <- title_size+0
  legend_txt_size <- 4
  legend_size <- 3
} else if (c_type == "SKCM" & nrow(sig_comparison_list) > 10){
  txt_axis_size <- 6
  star_size <- 2
  title_size <- 8
  subtitle_size <- title_size+0
  legend_txt_size <- subtitle_size
  legend_size <- 3
} else {
  txt_axis_size <- 8
  star_size <- 3
  title_size <- 12
  subtitle_size <- title_size+0
  legend_txt_size <- subtitle_size
  legend_size <- 6
}
```

```{r}

if (length(sig_phenotypes_multivariate)>0){
    
  p <- multivariate_w_adjP_sig %>%  
    filter(!grepl("cellfrac", phenotype)) %>% 
    mutate(phenotype = ifelse(grepl("mut_", phenotype), 
                              paste(gsub("mut_", "", phenotype), "mutation"), 
                              rename_phenotype[phenotype])) %>% 
    rowwise() %>% 
    # Change age to use symbols: 
    mutate(comparison = ifelse(phenotype == "Age at Diagnosis" | 
                                 grepl("breslow", str_to_lower(phenotype)) |
                               grepl("pack_years", str_to_lower(phenotype)),
                               use_bigger_smaller_signs(comparison),
                               comparison)) %>% 
    mutate(comparison = ifelse(phenotype == "Karnofsky Performance Score",
                               gsub("X", "", comparison),
                               comparison)) %>%
    mutate(condition_plot = ifelse(comparison == "continuous_linear_relations" |
                                     grepl("MUT", comparison), 
                                   paste0(phenotype), 
                                   paste0(phenotype, ":\n", comparison))) %>% 
    mutate(condition_plot = ifelse(nchar(comparison)>50, 
                                   gsub("_vs_", "_vs\n", condition_plot),
                                   condition_plot)) %>% 
    mutate(condition_plot = gsub("_", " ", condition_plot)) %>% 
    # Remove if condition is LOW: 
    filter(sample_sizes_limit != "LOW") %>% 
    mutate(significance = case_when(
      P.Value < 0.001 ~ "***",
      P.Value < 0.01  ~ "**",
      P.Value < 0.05  ~ "*",
      TRUE              ~ "")) %>% 
    ggplot(aes(x = gene, y = condition_plot, fill = logFC)) +
    geom_tile() + 
    geom_text(aes(label = significance), color = "black", size = star_size) + 
    scale_fill_gradient2(low = "blue4", mid = "white", high = "red4", midpoint = 0) +
    theme_minimal() +
    theme(axis.text.x = element_text(size = txt_axis_size, 
                                     angle = 30,
                                     vjust = 0.75),
      axis.text.y = element_text(size = txt_axis_size),
      axis.title = element_blank(),
      title = element_text(size=title_size),
      plot.subtitle = element_text(size = subtitle_size),
      legend.title = element_text(size = subtitle_size),
      legend.text = element_text(size = legend_txt_size),
      legend.key.size = unit(legend_size, "mm")
    ) +
    coord_fixed() +
    labs(subtitle = "Phenotypes") + 
    ggtitle(ifelse(c_type == "SKCM",
                   paste0("Limma multivariate analysis of ", c_type, 
                          " (", gsub("SKCM_", "",sub_ctype), ")"),
                   paste0("Limma multivariate analysis of ", c_type)))
    
  print(p)
  
  ggsave(filename = ifelse(c_type == "SKCM",
                paste0(path_save_plots, 
                "heatmap_multivariate_phenotypes_",
                sub_ctype,
                ".pdf"),
                paste0(path_save_plots, 
                "heatmap_multivariate_",
                c_type, 
                ".pdf")),
     device = cairo_pdf)

  
  
  
  ## FOr the cell fractions: 
  p <- multivariate_w_adjP_sig %>%  
    filter(grepl("cellfrac", phenotype),
         !grepl("uncharacterized", phenotype)) %>% 
    mutate(phenotype = gsub("cellfrac_", "", phenotype)) %>%  
    mutate(phenotype = gsub("\\.\\.\\.", " - ", phenotype)) %>% 
    mutate(phenotype = gsub("\\.", " ", phenotype)) %>% 
    mutate(phenotype = gsub("Tregs", "", phenotype)) %>%
    mutate(phenotype = sub("\\s+$", "", phenotype)) %>% 
    mutate(condition_plot = paste0(phenotype, ":\n", comparison)) %>% 
    mutate(condition_plot = ifelse(nchar(comparison)>50, 
                                   gsub("_vs_", "_vs\n", condition_plot),
                                   condition_plot)) %>% 
    mutate(condition_plot = gsub("_", " ", condition_plot)) %>% 
    # Remove if condition is LOW: 
    filter(sample_sizes_limit != "LOW") %>% 
    mutate(significance = case_when(
      P.Value < 0.001 ~ "***",
      P.Value < 0.01  ~ "**",
      P.Value < 0.05  ~ "*",
      TRUE              ~ "")) %>% 
    ggplot(aes(x = gene, y = condition_plot, fill = logFC)) +
    geom_tile() + 
    geom_text(aes(label = significance), color = "black", size = 3) + 
    scale_fill_gradient2(low = "blue4", mid = "white", high = "red4", midpoint = 0) +
    theme_minimal() +
    theme(axis.text.x = element_text(size = 8, 
                                     angle = 30,
                                     vjust = 0.75),
      axis.text.y = element_text(size = 8),
      axis.title = element_blank(),
      title = element_text(size=15)
    ) +
    coord_fixed() +
    labs(subtitle = "Cell fractions") + 
    ggtitle(ifelse(c_type == "SKCM",
                 paste0("Limma multivariate analysis of ", c_type, 
                        " (", gsub("SKCM_", "",sub_ctype), ")"),
                 paste0("Limma multivariate analysis of ", c_type)))
    
  print(p)
  
  ggsave(filename = ifelse(c_type == "SKCM",
                  paste0(path_save_plots, 
                  "heatmap_multivariate_cellfrac_",
                  sub_ctype,
                  ".pdf"),
                  paste0(path_save_plots, 
                  "heatmap_multivariate_cellfrac_",
                  c_type, 
                  ".pdf")), 
         device = cairo_pdf)
}

```

### Tables

```{r}
# Tables with sample sizes

if (length(sig_phenotypes_multivariate)>0){
      
  multivariate_sample_size_table <- multivariate_w_adjP_sig %>% 
    filter(sample_sizes_limit != "LOW") %>% 
    mutate(phenotype = ifelse(grepl("mut_", phenotype), 
                              paste(gsub("mut_", "", phenotype), 
                                    "mutation"), 
                              ifelse(grepl("cellfrac", phenotype) ,
                                     phenotype, 
                                     rename_phenotype[phenotype]))) %>% 
    mutate(phenotype = gsub("cellfrac_", "", phenotype)) %>% 
    mutate(phenotype = gsub("\\.\\.\\.", " - ", phenotype)) %>% 
    mutate(phenotype = gsub("\\.", " ", phenotype)) %>% 
    mutate(phenotype = gsub("Tregs", "", phenotype)) %>%
    rowwise() %>% 
    # Change age to use symbols: 
    mutate(cat_sample_size = ifelse(phenotype == "Age at Diagnosis" | 
                                 grepl("breslow", str_to_lower(phenotype)) |
                                   grepl("pack_years", str_to_lower(phenotype)),
                               use_bigger_smaller_signs(cat_sample_size),
                               cat_sample_size)) %>% 
    mutate(cat_sample_size = gsub("≥", ">=", cat_sample_size)) %>% 
    dplyr::select(phenotype, cat_sample_size, total_sample_size) %>% 
    group_by(phenotype, total_sample_size) %>%
    summarise(
      cat_sample_size = paste(unique(unlist(strsplit(cat_sample_size, ", "))), collapse = ", ")
    ) %>% 
    mutate(cat_sample_size = gsub(":", ": ", cat_sample_size)) %>% 
    unique()
  
  # Change colnames of the table: 
  new_colnames <- multivariate_sample_size_table %>% 
    colnames() %>% 
    lapply(function(x) firstup(gsub("_", " ", x))) %>% 
    unlist() %>% 
    gsub("Cat", "Subgroup", .)
   
  colnames(multivariate_sample_size_table) <- new_colnames 
   
  # Make pretty table
  multivariate_sample_size_table %>% 
    kable(caption = paste("Sample sizes for limma multivariate analysis of", c_type)) %>%   
    kable_styling(full_width = F, position = "center", fixed_thead = T) %>%
    column_spec(1:ncol(multivariate_sample_size_table), width = "5cm") 
    
  table<-kable(multivariate_sample_size_table, format="markdown")
  
  table_file_name <- ifelse(c_type == "SKCM",
                            paste0(path_save_plots,
                                   "multivariate_sample_size_table_", 
                                   sub_ctype, ".pdf"),
                            paste0(path_save_plots,
                                   "multivariate_sample_size_table_", 
                                   c_type, ".pdf"))
  
  cat(table, sep="\n", 
      file=table_file_name)
  render(table_file_name,
         output_format = rmarkdown::pdf_document(latex_engine = "lualatex"))

  
}


####
univariate_sample_size_table <- table_w_adjP_sig %>% 
  filter(sample_sizes_limit != "LOW") %>% 
  mutate(phenotype = ifelse(grepl("mut_", phenotype), 
                            paste(gsub("mut_", "", phenotype), 
                                  "mutation"), 
                            ifelse(grepl("cellfrac", phenotype) ,
                                   phenotype, 
                                   rename_phenotype[phenotype]))) %>% 
  mutate(phenotype = gsub("cellfrac_", "", phenotype)) %>% 
  mutate(phenotype = gsub("\\.\\.\\.", " - ", phenotype)) %>% 
  mutate(phenotype = gsub("\\.", " ", phenotype)) %>% 
  mutate(phenotype = gsub("Tregs", "", phenotype)) %>% 
  rowwise() %>% 
  # Change age to use symbols: 
  mutate(cat_sample_size = ifelse(phenotype == "Age at Diagnosis" | 
                               grepl("breslow", str_to_lower(phenotype)) |
                                 grepl("pack_years", str_to_lower(phenotype)),
                             use_bigger_smaller_signs(cat_sample_size),
                             cat_sample_size)) %>% 
  mutate(cat_sample_size = gsub("≥", ">=", cat_sample_size)) %>% 
  dplyr::select(phenotype, cat_sample_size, total_sample_size) %>% 
  group_by(phenotype, total_sample_size) %>%
  summarise(
    cat_sample_size = paste(unique(unlist(strsplit(cat_sample_size, ", "))), collapse = ", ")
  ) %>% 
  mutate(cat_sample_size = gsub(":", ": ", cat_sample_size)) %>% 
  unique() 

# Change colnames of the table: 
new_colnames <- univariate_sample_size_table %>% 
  colnames() %>% 
  lapply(function(x) firstup(gsub("_", " ", x))) %>% 
  unlist() %>% 
  gsub("Cat", "Subgroup", .)
 
colnames(univariate_sample_size_table) <- new_colnames 

# Make pretty table
univariate_sample_size_table %>% 
  kable(caption = paste("Sample sizes for limma univariate analysis of", c_type)) %>%   
  kable_styling(full_width = F, position = "center", fixed_thead = T) %>%
  column_spec(1:ncol(univariate_sample_size_table), width = "5cm") 


table_file_name <- ifelse(c_type == "SKCM", 
              paste0(path_save_plots, 
                     "univariate_sample_size_table_", 
                     sub_ctype, ".pdf"),
              paste0(path_save_plots, 
                     "univariate_sample_size_table_", 
                     c_type, ".pdf"))

table<-kable(univariate_sample_size_table, format="markdown")
cat(table, sep="\n", 
    file=table_file_name)
render(table_file_name,
       output_format = rmarkdown::pdf_document(latex_engine = "lualatex"))


```

### Boxplots

#### Load TPM data for visualization

```{r}
# Load in TPM data: 

tpm_target_data <- read_tsv(paste0(file_path_xenadata,
                                "TCGA_pancan_tpm_target_genes_log2_tpm_plus1.tsv"),
                         show_col_types = F) %>% 
  dplyr::select(gene, rownames(dge$samples))


```

```{r}
tpm_target_data_longs <- tpm_target_data %>% 
  pivot_longer(-gene, 
               names_to = "samples",
               values_to = "gene_expression_tpm") 

sig_phenotypes_multivariate

df_sig_pheno <- dge$samples %>% 
  dplyr::select(all_of(sig_phenotypes_univariate)) %>% 
  rownames_to_column("samples")

# Add phenotype data for significant phenotypes:
tpm_target_data_longs <- tpm_target_data_longs %>% 
  left_join(df_sig_pheno, by="samples") 


# Make table with only significant genes!
df_sig_genes_multivariate <- multivariate_w_adjP_sig %>% 
  filter(P.Value < 0.05) %>%  
  mutate(test = "multivariate")

df_sig_genes_univariate <- table_w_adjP_sig %>% 
  filter(P.Value < 0.05) %>% 
  mutate(test = "univariate")

sig_genes_both <- df_sig_genes_multivariate %>% 
  bind_rows(df_sig_genes_univariate) %>% 
  filter(comparison != "continuous_linear_relations")


# looping all significant phenotypes for plotting: 
sig_pheno_2 <- sig_phenotypes_univariate[!sig_phenotypes_univariate %in% colnames(df_cellfrac)]

for (x_pheno in sig_pheno_2){
  
  if (!x_pheno %in% continuous_sig_phenos){
    # If the gene is significant for multivariate, denote it: 
    genes_mutlivariate_sig <- sig_genes_both %>% 
      filter(phenotype == x_pheno,
             sample_sizes_limit != "LOW") %>% 
      filter(test=="multivariate") %>% 
      dplyr::select(gene) %>% 
      unique() %>% unlist(use.names = F)
    
    # List of significant genes:
    sig_genes_xpheno <- sig_genes_both %>% 
      filter(phenotype == x_pheno,
             sample_sizes_limit != "LOW") %>% 
      dplyr::select(gene) %>% 
      unique() %>% 
      unlist(use.names = F)
    
    # If any genes are significant with NOT LOW in sample size limit :
    if(length(sig_genes_xpheno) >0){
      # TPM gene expression data of significant genes and x_pheno.
      x_pheno_tpm_data <- tpm_target_data_longs %>% 
        filter(gene %in% sig_genes_xpheno,
               !is.na(!!sym(x_pheno))) %>% 
        dplyr::select(gene, samples, gene_expression_tpm, all_of(x_pheno)) 
      
      # All subgroups of x_pheno
      all_subgroups <- x_pheno_tpm_data[[x_pheno]] %>% unique()
      
      # List of comparisons that are significant.
      sig_comparisons <- sig_genes_both %>% 
        dplyr::filter(phenotype == x_pheno, 
                      sample_sizes_limit != "LOW") %>% 
        dplyr::select(comparison) %>% 
        unique() %>% 
        unlist()
      
      # List of subgroups that are significant: 
      sig_subgroups <- all_subgroups[sapply(all_subgroups, 
                                            function(sub) any(grepl(sub,
                                                                    sig_comparisons)))]
      
      # Update data to only include subgroups which are significant
      x_pheno_tpm_data <- x_pheno_tpm_data %>%
        filter(!!sym(x_pheno) %in% sig_subgroups)
      
      phenotype_name <- ifelse(grepl("mut_", x_pheno), 
                               paste(gsub("mut_", "", x_pheno), "mutation"), 
                               rename_phenotype[[x_pheno]])
      
      # Export boxplot as pdf
      pdf(file = paste0(path_save_plots, 
                    "boxplot_limma_significant_",
                    c_type, "_", x_pheno,
                    ".pdf"), 
      paper = "a4r",
      height = 15, width = 16)
      
      p <- x_pheno_tpm_data %>% 
        rename(Subgroup = !!sym(x_pheno)) %>% 
        mutate(Subgroup = gsub("_", " ", Subgroup)) %>% 
        mutate(Subgroup = ifelse(Subgroup == "MUT", "Mutation", 
                      ifelse(Subgroup == "WT", "Wildtype", Subgroup))) %>% 
        ggplot(aes(x = gene, y = gene_expression_tpm, fill = Subgroup)) +
        geom_boxplot() +
        scale_fill_viridis_d() +
        # Highlight the x-axis labels if they are in the `gene_list`
        scale_x_discrete(labels = function(x) {
          ifelse(x %in% genes_mutlivariate_sig, paste0("**", x, "**"), x)
        }) +
        theme_minimal() +
        theme(axis.text.x = element_text(size = 12, 
                                     angle = 30,
                                     vjust = 0.75),
              axis.text.y = element_text(size = 12),
              axis.title.x = element_blank(),
              title = element_text(size=15), 
              legend.text=element_text(size=10)) +
        labs(y = "log2(tpm+1)") + 
        ggtitle(paste("TPM expression of significant target genes\nin significant subgroups of", 
                      phenotype_name, 
                      "for", 
                      c_type))
      
      print(p)
      
      dev.off()
    }
  }
}



```
