---
title: "xena_data_analysis"
format: html
editor: visual
---

## Load packages and targets

```{r}
library(tidyverse)
library(R.utils)
```

```{r}
target_list <- c("CD274", "PDCD1LG2", "IDO1", "TDO2", "ARG1", "ARG2", "TGFB1", "CCL22", "CCL2", "LGALS3","LRRC32", "IL10", "SIGLEC15", "BIRC7")

```

## Download data

```{r}
# Cohort:
cohort = "TCGA_Acute_Myeloid_Leukemia_LAML"
file_path <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/Xena/"
dir.create(file_path, showWarnings = FALSE, recursive = TRUE)
```

```{r}
## Data
data_type = "gene_expression_RNAseq_pancan_normalized"

# Specify the URL of the file you want to download
url <- "https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/TCGA.LAML.sampleMap%2FHiSeqV2_PANCAN.gz"

# Specify the file name and location where you want to save the file on your computer
file_name_data <- paste0(cohort, "_", data_type)

if (!(file.exists(paste(file_path, file_name_data, ".tsv.gz", sep = "")))){
  # Call the download.file() function, passing in the URL and file name/location as arguments
  download.file(url, paste(file_path, file_name_data, ".tsv.gz", sep = ""), mode = "wb")
}

if (!(file.exists(paste(file_path, file_name_data, ".tsv", sep = "")))){
  gunzip(paste(file_path, file_name_data, ".tsv.gz", sep = ""))
}
```

```{r}
## Phenotype
data_type = "phenotype"

# Specify the URL of the file you want to download
url <- "https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/TCGA.LAML.sampleMap%2FLAML_clinicalMatrix"

# Specify the file name and location where you want to save the file on your computer
file_name_pheno <- paste0(cohort, "_", data_type)

# Call the download.file() function, passing in the URL and file name/location as arguments
if (!(file.exists(paste(file_path, file_name_pheno, ".tsv", sep = "")))){
  download.file(url, paste(file_path, file_name_pheno, ".tsv", sep = ""), mode = "wb")
}
```

```{r}
df_data <- read.csv(paste(file_path, file_name_data, ".tsv", sep = ""),sep = "\t")
df_phenotype <- read.csv(paste(file_path, file_name_pheno, ".tsv", sep = ""),sep = "\t")
```

## Download gene expression across cohorts

```{r}
file_path <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/Xena/"
dir.create(file_path, showWarnings = FALSE, recursive = TRUE)

data_type = "gene_expression_RNAseq_pancan_normalized"

url_list <- c("https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/TCGA.LAML.sampleMap%2FHiSeqV2_PANCAN.gz",
              "https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/TCGA.CHOL.sampleMap%2FHiSeqV2_PANCAN.gz",
              "https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/TCGA.CESC.sampleMap%2FHiSeqV2_PANCAN.gz",
              "https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/TCGA.DLBC.sampleMap%2FHiSeqV2_PANCAN.gz",
              "https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/TCGA.HNSC.sampleMap%2FHiSeqV2_PANCAN.gz",
              "https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/TCGA.BRCA.sampleMap%2FHiSeqV2_PANCAN.gz",
              "https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/TCGA.PAAD.sampleMap%2FHiSeqV2_PANCAN.gz",
              "https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/TCGA.SKCM.sampleMap%2FHiSeqV2_PANCAN.gz",
              "https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/TCGA.LUAD.sampleMap%2FHiSeqV2_PANCAN.gz",
              "https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/TCGA.LUSC.sampleMap%2FHiSeqV2_PANCAN.gz")
cohort_list <- c("TCGA_LAML",
                 "TCGA_CHOL",
                 "TCGA_CESC",
                 "TCGA_DLBC",
                 "TCGA_HNSC",
                 "TCGA_BRCA",
                 "TCGA_PAAD",
                 "TCGA_SKCM",
                 "TCGA_LUAD",
                 "TCGA_LUSC")
```

```{r}
# Read the list with dataframes instead of running loop below: 
readRDS("df_data_list.RData")
```

```{r}
df_data_list <- c()

for (i in 1:length(url_list)){
  print(cohort_list[i])
  
  url <- url_list[i]
  file_name_data <- paste0(cohort_list[i], "_", data_type)
  
  if (!(file.exists(paste(file_path, file_name_data, ".tsv.gz", sep = "")) | 
        file.exists(paste(file_path, file_name_data, ".tsv", sep = "")))){
    download.file(url, paste(file_path, file_name_data, ".tsv.gz", sep = ""), mode = "wb")
  }
  
  if (!(file.exists(paste(file_path, file_name_data, ".tsv", sep = "")))){
    gunzip(paste(file_path, file_name_data, ".tsv.gz", sep = ""))
  }
  
  df_data_list[[i]] <- read.csv(paste(file_path, file_name_data, ".tsv", sep = ""),sep = "\t")
}

saveRDS(df_data_list, file="df_data_list.RData")
```

```{r}
# Preprocess data frames to be pivot long and add cancer type as column:
preproc_df_list <- Map(function(df, cohort_x) {
  filter(df, sample %in% target_list) %>% 
    rename(target = sample) %>% 
    pivot_longer(cols = -target, 
                 names_to = "sample", 
                 values_to = "gene_exp") %>% 
    mutate(cancer_type = str_remove(cohort_x, "TCGA_"))
}, df_data_list, cohort_list)

full_df <- bind_rows(preproc_df_list) 

targets_in_df_list <- full_df %>% 
  select(target) %>% 
  unique() %>% 
  as.list() %>% 
  unlist()
```

```{r}
target_x = targets_in_df_list[4]

get_box_stats <- function(y, upper_limit = max(filter(full_df, target==target_x)$gene_exp) * 1.15) {
  return(data.frame(
    y = 0.95 * upper_limit,
    label = paste(
      "Count =", length(y)
    )
  ))
}

# CD274 = PD-L1
# PDCD1LG2 = PD-L2
# CCL2 = MCP-1
# BIRC7 = MLIAP
# LRRC32 = GARP
# TDO2 = TDO

full_df %>% 
  filter(target == target_x) %>% 
  ggplot(aes(x=cancer_type, y=gene_exp)) +
    geom_boxplot() +
    geom_hline(aes(yintercept = 0), color = "red", linetype=2) +
    theme_classic() +
    labs(
      title = paste(target_x),
      subtitle = "Gene expression RNAseq pan cancer",
      caption = "Source: Xena browser, TCGA",
      x = "Cancer type",
      y = "Pan-cancer normalized log2(norm_count+1)"
    ) + 
    stat_summary(fun.data = get_box_stats, geom = "text", hjust = 0.5, vjust = 0.9) +
    theme(
      plot.title = element_text(color = "#0099f8", size = 16, face = "bold", hjust = 0.5),
      plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
      plot.caption = element_text(face = "italic")
    )
```

```{r}

func_preproc_df <- function (df, cohort_x){
  filter(df, sample %in% target_list) %>% 
    rename(target = sample) %>% 
    pivot_longer(cols=-target,
                 names_to="sample",
                 values_to="gene_exp") %>% 
    mutate(cancer_type = cohort_x)
}

filtered_df_list[[1]] %>% 
  filter(sample %in% target_list) %>% 
  rename(target = sample) %>% 
  pivot_longer(cols=-target,
               names_to="sample",
               values_to="gene_exp") %>% 
  mutate(cancer_type = cohort[1])
```

## Plot

```{r}
df_data %>% 
  filter(sample %in% target_list)
```

```{r}
df_phenotype
```
