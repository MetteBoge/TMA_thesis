---
title: "xena_data_isoforms"
format: html
editor: visual
---

## Load packages and targets

```{r}
library(tidyverse)
library(R.utils)
library(arrow)
library(biomaRt)
library(seqinr)
library(RColorBrewer)
library(viridis)
```

```{r}
target_list <- c("CD274", "PDCD1LG2", "IDO1", "TDO2", "ARG1", "ARG2", "TGFB1", "CCL22", "CCL2", "LGALS3","LRRC32", "IL10", "SIGLEC15", "BIRC7")

cancer_abbr_list <- c("LAML", "CHOL", "CESC", "DLBC", "HNSC", "BRCA", "PAAD", "SKCM", "LUAD", "LUSC")

```

## Download data

```{r}
# Cohort:
cohort = "TCGA_PANCAN"
file_path <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/Xena/"
dir.create(file_path, showWarnings = FALSE, recursive = TRUE)
```

```{r}
## Data
data_type = "transcript_expression_RNAseq_RSEM_tpm"

# Specify the URL of the file you want to download
url <- "https://toil-xena-hub.s3.us-east-1.amazonaws.com/download/tcga_rsem_isoform_tpm.gz"

# Specify the file name and location where you want to save the file on your computer
file_name_data <- paste0(cohort, "_", data_type)

options(timeout=1000)
if (!(file.exists(paste(file_path, file_name_data, ".tsv.gz", sep = "")) | 
        file.exists(paste(file_path, file_name_data, ".tsv", sep = "")))){
  # Call the download.file() function, passing in the URL and file name/location as arguments
  download.file(url, paste(file_path, file_name_data, ".tsv.gz", sep = ""), mode = "wb")
}

if (!(file.exists(paste(file_path, file_name_data, ".tsv", sep = "")))){
  gunzip(paste(file_path, file_name_data, ".tsv.gz", sep = ""))
}
```

```{r}
## Data 2
data_type = "transcript_expression_RNAseq_kallisto_tpm"

# Specify the URL of the file you want to download
url <- "https://toil-xena-hub.s3.us-east-1.amazonaws.com/download/tcga_Kallisto_tpm.gz"

# Specify the file name and location where you want to save the file on your computer
file_name_data <- paste0(cohort, "_", data_type)

options(timeout=10000)
if (!(file.exists(paste(file_path, file_name_data, ".tsv.gz", sep = "")) | 
        file.exists(paste(file_path, file_name_data, ".tsv", sep = "")))){
  # Call the download.file() function, passing in the URL and file name/location as arguments
  download.file(url, paste(file_path, file_name_data, ".tsv.gz", sep = ""), mode = "wb")
}

if (!(file.exists(paste(file_path, file_name_data, ".tsv", sep = "")))){
  gunzip(paste(file_path, file_name_data, ".tsv.gz", sep = ""))
}
```

```{r}
## sampleType_primaryDisease
data_type = "sampleType_primaryDisease"

# Specify the URL of the file you want to download
url <- "https://tcga-pancan-atlas-hub.s3.us-east-1.amazonaws.com/download/TCGA_phenotype_denseDataOnlyDownload.tsv.gz"

# Specify the file name and location where you want to save the file on your computer
file_name_pheno1 <- paste0(cohort, "_", data_type)

# Call the download.file() function, passing in the URL and file name/location as arguments
if (!(file.exists(paste(file_path, file_name_pheno1, ".tsv.gz", sep = "")) | 
        file.exists(paste(file_path, file_name_pheno1, ".tsv", sep = "")))){
  download.file(url, paste(file_path, file_name_pheno1, ".tsv", sep = ""), mode = "wb")
}
if (!(file.exists(paste(file_path, file_name_pheno1, ".tsv", sep = "")))){
  gunzip(paste(file_path, file_name_pheno1, ".tsv.gz", sep = ""))
}
```

```{r}
## curated_clinical_data
data_type = "curated_clinical_data"

# Specify the URL of the file you want to download
url <- "https://tcga-pancan-atlas-hub.s3.us-east-1.amazonaws.com/download/Survival_SupplementalTable_S1_20171025_xena_sp"

# Specify the file name and location where you want to save the file on your computer
file_name_pheno2 <- paste0(cohort, "_", data_type)

# Call the download.file() function, passing in the URL and file name/location as arguments
if (!(file.exists(paste(file_path, file_name_pheno2, ".tsv.gz", sep = "")) | 
        file.exists(paste(file_path, file_name_pheno2, ".tsv", sep = "")))){
  download.file(url, paste(file_path, file_name_pheno2, ".tsv", sep = ""), mode = "wb")
}
if (!(file.exists(paste(file_path, file_name_pheno2, ".tsv", sep = "")))){
  gunzip(paste(file_path, file_name_pheno2, ".tsv.gz", sep = ""))
}
```

### Read phenotype data

```{r}
df_st_pd <- read.csv(paste(file_path, file_name_pheno1, ".tsv", sep = ""),sep = "\t") 
df_clin_pd <- read.csv(paste(file_path, file_name_pheno2, ".tsv", sep = ""),sep = "\t")  

df_pheno <- df_clin_pd %>%    
  full_join(df_st_pd, by = "sample")  
```

```{r}

sample_id_df <- list()

for (c_type in cancer_abbr_list){
   df_pheno_c_type <- df_pheno %>% 
    filter(cancer.type.abbreviation == c_type)
   
   # Filter sample ids to only include those of tumor tissue. For LAML: only PBMC. 
   # For Melanoma, both metastatic and tumor. 
   if (c_type == "LAML"){
     sample_id_df[[c_type]] <- df_pheno_c_type %>% 
       filter(sample_type == "Primary Blood Derived Cancer - Peripheral Blood") %>%
       dplyr::select(sample)
     
   } else if(c_type == "SKCM"){
     sample_id_df[["SKCM_tumor"]] <- df_pheno_c_type %>% 
       filter(sample_type == "Primary Tumor") %>%
       dplyr::select(sample)
     
     sample_id_df[["SKCM_metastatic"]] <- df_pheno_c_type %>% 
       filter(sample_type == "Metastatic") %>%
       dplyr::select(sample)
     
   } else {
     sample_id_df[[c_type]] <- df_pheno_c_type %>% 
       filter(sample_type == "Primary Tumor") %>%
       dplyr::select(sample) 
   }
}

```

```{r}
# List of patients with more than one sample. Options to compare gene expression in same individual but from different tissue (e.g. tumor vs normal tissue same patient) 
#pat_morethan1sample <- df_pheno %>%    
#  group_by(X_PATIENT) %>%    
#  summarise(n=n()) %>%   
#  filter(n>1 & n < 200) %>%    
#  dplyr::select(X_PATIENT) %>%    
#  unlist(use.names = F)  
#df_pheno %>%  
#  filter(X_PATIENT %in% pat_morethan1sample)
```

### Read transcript data

```{r}
# Read for each cancer type (data made in python jupyter notebook)

transcript_data <- list()

for (c_type in cancer_abbr_list){
  df_tmp <- read.csv(paste0(file_path, "TCGA_PANCAN_transcript_expression_RNAseq_RSEM_tpm_", c_type, ".tsv"), sep="\t") 

  colnames(df_tmp) <- gsub("\\.", "-", colnames(df_tmp))

  if (c_type == "SKCM"){
    sample_ids_tmp <- intersect(colnames(df_tmp), unlist(rbind(sample_id_df[["SKCM_metastatic"]], sample_id_df[["SKCM_tumor"]])))
  } else {
    sample_ids_tmp <- intersect(colnames(df_tmp), unlist(sample_id_df[[c_type]]))
  }
  
  transcript_data[[c_type]] <- df_tmp %>% 
    mutate(gene_id_b = gsub("\\-.*", "", gene_id)) %>% 
    dplyr::select(transcript_id, gene_id, gene_id_b, sample_ids_tmp)

}

```

```{r}
transcript_data[["SKCM"]]
```

## Adjust to gene exp data (adjusted)

## Plot

### Heatmap

```{r}
c_type <- "PAAD"
gene_of_interest <- "ARG1"

transcript_data[[c_type]] %>% 
  pivot_longer(cols=-c("gene_id", "gene_id_b", "transcript_id"),
               names_to = "sample") %>% 
  ggplot(aes(sample, transcript_id, fill=value)) + 
  geom_tile() + 
  facet_grid(gene_id_b~., scales="free_y") +
  theme(
  #  axis.text.y = element_blank(), 
    axis.text.x = element_blank()
  ) + 
  labs(
    title = element_text(paste0("Transcript expression in ", c_type))
  )


# Which are not coding. 
# What transcript contain the target sequence (sent by email)

```

## Investigate the transcripts

```{r}
# Download the AA sequences of the coding transcripts: 

transcript_info_filepath <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/transcripts_all.tsv"

if (!(file.exists(transcript_info_filepath))){
  df_transcripts <- tibble()
  
  for (gene in target_list){
    df_transcripts <- bind_rows(df_transcripts, read_csv(paste0("C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/transcripts_", gene, ".csv"), show_col_types = FALSE))  
  }

  write_tsv(df_transcripts, transcript_info_filepath)
}


# Remove version numbers from the transcript ID. 
transcript_info <- read_tsv(transcript_info_filepath, show_col_types = FALSE) %>% 
  mutate(`Transcript ID` = gsub("\\..*", "", `Transcript ID`)) %>% 
  rename(transcript_id = `Transcript ID`) %>% 
  arrange(Name)

#transcript_info_protein <- transcript_info %>% 
#  dplyr::select(transcript_id, Protein)

transcript_info_wSeq <- transcript_info %>% 
  mutate(uniprot_seq = map(`UniProt Match`, function(uni_id) {
    if (nchar(uni_id)>1){
      print(uni_id)
      # If contains a space, it might have two ids: Split
      if (grepl(" ", uni_id)){
        
        seq_list <- list()
        for (sub_id in unlist(strsplit(uni_id, " "))){
          seq_list[[sub_id]] <- tryCatch({
            read.fasta(url(paste0("https://rest.uniprot.org/uniprotkb/", sub_id, ".fasta")), 
                                           as.string = T, 
                                           seqtype = "AA", 
                                           set.attributes = F)[[1]]}, 
            error = function(cond){
              message(paste("Error ocurred when downloading:", sub_id))
              message(conditionMessage(cond))
              message("Trying to download from different link.")
              read.fasta(url(paste0("https://rest.uniprot.org/unisave/", sub_id, "?format=fasta")), 
                                           as.string = T, 
                                           seqtype = "AA", 
                                           set.attributes = F)[[1]]
            })
        }
        return(seq_list)
      } else {
        read.fasta(url(paste0("https://rest.uniprot.org/uniprotkb/", 
                             uni_id, ".fasta")), 
                  as.string = T, 
                  seqtype = "AA", 
                  set.attributes = F)[[1]]
      }
    } else 
      NaN
    }))

# Check the nchar in the seq: (lengths)
#transcript_info_wSeq %>% 
#  mutate(seq_length = map(uniprot_seq, nchar)) %>% 
#  View()

# Unnest if more than one sequence:
transcript_info_wSeq <- transcript_info_wSeq %>% 
  mutate(uniprot_seq = map(uniprot_seq, ~ if (!is.list(.x)) list(.x) else .x)) %>%  # Convert characters to lists 
  unnest(uniprot_seq)


transcript_info_protein <- transcript_info_wSeq %>% 
  dplyr::select(transcript_id, Protein, Biotype)

target_match_trans <- target_seq["matching_proteins"] %>% unlist(use.names = F)
```

### Target sequences

```{r}
# Construct data frame of the target sequences recieved on email from Morten Holmstrom. 

# Protein, name of epitope, epitope: 
target_seq <- rbind(c("CD274", "IO103", "FMTYWHLLNAFTVTVPKDL"),
      c("IDO1", "IO102", "DTLLKALLEIASCLEKALQVF"),
      c("ARG1", "ARGLong2", "ISAKDIVYIGLRDVDPGEHYILKTLGIKYFSMTEVDRL"),
      c("PDCD1LG2", "PD-L2Long1", "SLELQLHQIAALFTVTVPKEL"),
      c("CCL22", "CCL22Long1", "MDRLQTALLVVLVLLAVALQAT"),
      c("ARG2", "ARG2Long", "LQTRVHSILKKSVHSVAVIG"),
      c("TGFb1", "TGFb_02", "LLLPLLWLLVLTPGRPAAGL"),
      c("TGFb1", "TGFb_15", "REAVPEPVLLSRAELRLLRL"),
      c("TGFb1", "TGFb_33", "FCLGPCPYIWSLDTQYSKVL"),
      c("TGFb1", "TGFb_38", "GRKPKVEQLSNMIVRSCKCS"),
      c("IL10", "IL10_L17", "FDIFINYIEAYMTMKIRN")) %>% 
  as_tibble()

colnames(target_seq) <- c("protein", "epitope_name", "epitope_seq")

# Align to protein sequences of coding transcripts: 
target_seq <- target_seq %>%
  rowwise() %>%
  mutate(matching_proteins = list(transcript_info_wSeq %>%
                                    filter(str_detect(uniprot_seq, epitope_seq)) %>%
                                    pull(Name))) %>%
  ungroup() %>% 
  unnest(matching_proteins) %>% 
  distinct() # Remove duplicated rows. 

prot_w_target_seq <- target_seq %>% 
  dplyr::select(protein) %>% 
  unique() %>% 
  unlist(use.names = F) %>% 
  toupper()
```

### Percentage of expression

```{r}
c_type = cancer_abbr_list[1] # "PAAD"

p_transcript_composition_w_epitope <- list()
p_transcript_composition_wo_epitope <- list()

for (c_type in cancer_abbr_list){
    
  transcript_data_ctype <- transcript_data[[c_type]] %>% 
    left_join(transcript_info_protein, by="transcript_id") %>% 
    mutate(target_seq_incl = ifelse(gene_id %in% target_match_trans, TRUE, FALSE)) %>% 
    mutate(Biotype= ifelse(target_seq_incl, "target_epitope", Biotype)) %>% 
    relocate(transcript_id, gene_id, gene_id_b, Protein, Biotype, target_seq_incl) %>% 
    dplyr::select(-c(Protein, target_seq_incl))
  
  
  transcript_data_ctype_long <- transcript_data_ctype %>% 
    pivot_longer(cols = -c(transcript_id, gene_id, gene_id_b, Biotype),
                 values_to = "transcript_exp",
                 names_to = "samples") %>% 
    group_by(gene_id_b, samples) %>% 
    mutate(transcript_exp_inv = 2 ^ transcript_exp) %>% 
    mutate(total_exp_inv = sum(transcript_exp_inv)) %>% 
    mutate(percentage_exp = transcript_exp_inv / total_exp_inv) %>% 
    ungroup() 
  
  p_transcript_composition_w_epitope[[c_type]] <- transcript_data_ctype_long %>% 
    filter(gene_id_b %in% prot_w_target_seq) %>% 
    ggplot(aes(x=samples, y=percentage_exp, fill=Biotype)) +
    geom_bar(stat = "identity") +
    facet_wrap(~gene_id_b) +
    labs(#title = "Composition of expressed transcripts for \n8 genes with target epitopes",
      subtitle = c_type,
      caption = "Source: Xena Browser, TCGA PANCAN",
      x = "Samples",
      y = "Fraction"
    ) +
    scale_fill_brewer(palette = "Dark2") + 
    theme(
      text=element_text(family="serif"),
      plot.title = element_text(color = "#0099f8", size = 16, face = "bold", hjust = 0.5),
      plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
      plot.caption = element_text(face = "italic"),
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank(),
      axis.title = element_text(size = 13),
      strip.background.x = element_blank(),
      legend.position = ifelse(c_type == "LUSC", "right", "none")
      )
    
  p_transcript_composition_wo_epitope[[c_type]] <- transcript_data_ctype_long %>% 
    filter(!gene_id_b %in% prot_w_target_seq) %>% 
    ggplot(aes(x=samples, y=percentage_exp, fill=Biotype)) +
    geom_bar(stat = "identity") +
    facet_wrap(~gene_id_b) + 
    labs(#title = "Composition of expressed transcripts for \n6 genes without target epitopes",
      subtitle = c_type,
      caption = "Source: Xena Browser, TCGA PANCAN",
      x = "Samples",
      y = "Fraction"
    ) +
    scale_fill_brewer(palette = "Dark2") + 
    #scale_fill_viridis(option = "D", discrete = T) + 
    theme(
      text=element_text(family="serif"),
      plot.title = element_text(color = "#0099f8", size = 16, face = "bold", hjust = 0.5),
      plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
      plot.caption = element_text(face = "italic"),
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank(),
      axis.title = element_text(size = 13),
      strip.background.x = element_blank(),
      legend.position = ifelse(c_type == "LUSC", "right", "none")
      )
    
}

p_transcript_composition_wo_epitope
```

```{r}
# Violin plots of original expression values 

gene_w_single_transcript <- transcript_data_ctype_long %>% 
  filter(samples == "TCGA-56-A5DR-01") %>% 
  group_by(gene_id_b) %>% 
  summarise(n=n()) %>% 
  filter(n<2) %>% 
  dplyr::select(gene_id_b) %>% 
  unlist()


p_transcript_exp_w_epitope <- list()
p_transcript_exp_wo_epitope <- list()
p_transcript_exp_single_trans <- list()

for (c_type in cancer_abbr_list){
    
  transcript_data_ctype <- transcript_data[[c_type]] %>% 
    left_join(transcript_info_protein, by="transcript_id") %>% 
    mutate(target_seq_incl = ifelse(gene_id %in% target_match_trans, TRUE, FALSE)) %>% 
    mutate(Biotype= ifelse(target_seq_incl, "target_epitope", Biotype)) %>% 
    relocate(transcript_id, gene_id, gene_id_b, Protein, Biotype, target_seq_incl) %>% 
    dplyr::select(-c(Protein, target_seq_incl))
  
  
  transcript_data_ctype_long <- transcript_data_ctype %>% 
    pivot_longer(cols = -c(transcript_id, gene_id, gene_id_b, Biotype),
                 values_to = "transcript_exp",
                 names_to = "samples") %>% 
    group_by(gene_id_b, samples) %>% 
    mutate(transcript_exp_inv = 2 ^ transcript_exp) %>% 
    mutate(total_exp_inv = sum(transcript_exp_inv)) %>% 
    mutate(percentage_exp = transcript_exp_inv / total_exp_inv) %>% 
    ungroup() 
  
  n_samples = transcript_data_ctype_long %>% 
    dplyr::select(samples) %>% 
    unique() %>% 
    nrow()
  
  p_transcript_exp_w_epitope[[c_type]] <- transcript_data_ctype_long %>% 
    filter(gene_id_b %in% prot_w_target_seq,
           !gene_id_b %in% gene_w_single_transcript) %>% 
    ggplot(aes(x=gene_id, y=transcript_exp, fill=Biotype)) +
    geom_violin() +
    facet_wrap(~gene_id_b, scales = "free_x") + 
    labs(#title = "Composition of expressed transcripts for \n6 genes without target epitopes",
      subtitle = paste0(c_type, " (n = ", n_samples, ")"),
      caption = "Source: Xena Browser, TCGA PANCAN",
      x = "Isoforms",
      y = "Transcript expression (log2(tpm + 0.001))"
    ) +
    scale_fill_brewer(palette = "Dark2") + 
    #scale_fill_viridis(option = "D", discrete = T) + 
    theme(
      text=element_text(family="serif"),
      plot.title = element_text(color = "#0099f8", size = 16, face = "bold", hjust = 0.5),
      plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
      plot.caption = element_text(face = "italic"),
      axis.title = element_text(size = 13),
      axis.title.x = element_text(vjust = 0),
      axis.text.x = element_text(angle = 90, vjust = 0.5),
      strip.background.x = element_blank(),
      legend.position = ifelse(c_type == "LUSC", "right", "none")
      )
  
  
  p_transcript_exp_wo_epitope[[c_type]] <- transcript_data_ctype_long %>% 
    filter(!gene_id_b %in% prot_w_target_seq,
           !gene_id_b %in% gene_w_single_transcript) %>% 
    ggplot(aes(x=gene_id, y=transcript_exp, fill=Biotype)) +
    geom_violin() +
    facet_wrap(~gene_id_b, scales = "free_x") + 
    labs(#title = "Composition of expressed transcripts for \n6 genes without target epitopes",
      subtitle = paste0(c_type, " (n = ", n_samples, ")"),
      caption = "Source: Xena Browser, TCGA PANCAN",
      x = "Isoforms",
      y = "Transcript expression (log2(tpm + 0.001))"
    ) +
    scale_fill_brewer(palette = "Dark2") + 
    #scale_fill_viridis(option = "D", discrete = T) + 
    theme(
      text=element_text(family="serif"),
      plot.title = element_text(color = "#0099f8", size = 16, face = "bold", hjust = 0.5),
      plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
      plot.caption = element_text(face = "italic"),
      axis.title = element_text(size = 13),
      axis.text.x = element_text(angle = 90, vjust = 0.5),
      axis.title.x = element_text(vjust = 0),
      strip.background.x = element_blank(),
      legend.position = ifelse(c_type == "LUSC", "right", "none")
      )
  
  p_transcript_exp_single_trans[[c_type]] <- transcript_data_ctype_long %>% 
    filter(gene_id_b %in% gene_w_single_transcript) %>% 
    ggplot(aes(x=gene_id, y=transcript_exp, fill=Biotype)) +
    geom_violin() +
    facet_wrap(~gene_id_b, scales = "free_x") + 
    labs(#title = "Composition of expressed transcripts for \n6 genes without target epitopes",
      subtitle = paste0(c_type, " (n = ", n_samples, ")"),
      caption = "Source: Xena Browser, TCGA PANCAN",
      x = "Isoforms",
      y = "Transcript expression (log2(tpm + 0.001))"
    ) +
    scale_fill_brewer(palette = "Dark2") + 
    #scale_fill_viridis(option = "D", discrete = T) + 
    theme(
      text=element_text(family="serif"),
      plot.title = element_text(color = "#0099f8", size = 16, face = "bold", hjust = 0.5),
      plot.subtitle = element_text(face = "bold.italic", hjust = 0.5),
      plot.caption = element_text(face = "italic"),
      axis.title = element_text(size = 13),
#      axis.text.x = element_text(angle = 90, vjust = 0.5),
      strip.background.x = element_blank(),
      legend.position = ifelse(c_type == "LUSC", "right", "none")
      )
}


p_transcript_exp_single_trans
```
