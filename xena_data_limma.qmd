---
title: "xena_data_limma"
format: html
editor: visual
---

```{r}
# Control operations: 
load_tpm <- FALSE
```

## Load libraries and data

```{r}
library(tidyverse)
library(limma)
#library(Glimma)
library(ggbiplot)
library(reshape2)
library(edgeR)
library(R.utils)
```

```{r}
file_path_xenadata <- "C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/Xena/"

file_name_pheno1 <- "TCGA_PANCAN_sampleType_primaryDisease"
file_name_pheno2 <- "TCGA_PANCAN_curated_clinical_data"


target_list <- c("CD274", "PDCD1LG2", "IDO1", "TDO2", "ARG1", "ARG2", "TGFB1", "CCL22", "CCL2", "LGALS3","LRRC32", "IL10", "SIGLEC15", "BIRC7")
cancer_abbr_list <- c("LAML", "CHOL", "CESC", "DLBC", "HNSC", "BRCA", "PAAD", "SKCM", "LUAD", "LUSC")
```

```{r}
# Read tne phenotype data:
df_st_pd <- read.csv(paste(file_path_xenadata, 
                           file_name_pheno1, ".tsv", sep = ""),sep = "\t")
df_clin_pd <- read.csv(paste(file_path_xenadata, 
                             file_name_pheno2, ".tsv", sep = ""),sep = "\t")

df_pheno <- df_clin_pd %>% 
  full_join(df_st_pd, by = "sample")
```

```{r}
# Load in more phenotype data

for (c_type in cancer_abbr_list) {
  download_link <- paste0("https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/TCGA.", 
                          c_type, 
                          ".sampleMap%2F",
                          c_type, 
                          "_clinicalMatrix")
  
  file_name_pheno <- paste0(file_path_xenadata, "TCGA_", c_type, "_phenotype.tsv")
  
  
  if (!(file.exists(file_name_pheno))){
   download.file(download_link, file_name_pheno, mode = "wb")
  } 
  
  # Load data tables to list: 
  if (!exists("phenotype_ctype")){
    phenotype_ctype <- list()
    phenotype_ctype[[c_type]] <- read.csv(file_name_pheno, sep = "\t") %>% 
      rename(sample = sampleID)
  } else if (!c_type %in% names(phenotype_ctype)){
    phenotype_ctype[[c_type]] <- read.csv(file_name_pheno, sep = "\t") %>% 
      rename(sample = sampleID)
  }
}

```

```{r}

top10_mutations <- list()

# Load in the mutation data: 

for (c_type in cancer_abbr_list) {
  download_link <- paste0("https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/mc3_gene_level%2F", 
                          c_type, 
                          "_mc3_gene_level.txt.gz")
  if (c_type == "LAML"){
    download_link <- "https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/TCGA.LAML.sampleMap%2Fmutation_wustl_gene.gz"
  }
  
  file_name_mut <- paste0(file_path_xenadata, "TCGA_", c_type, "_non-silent_mutation")
  
  
  if (!(file.exists(paste0(file_name_mut, ".tsv.gz")) | 
        file.exists(paste0(file_name_mut, ".tsv")))){
    download.file(download_link, paste0(file_name_mut, ".tsv.gz"), mode = "wb")
  } 
  if (!(file.exists(paste0(file_name_mut, ".tsv")))){
    gunzip(paste0(file_name_mut, ".tsv.gz"))
  }

  
  # Load data tables to list: 
  if (!exists("mut_ctype")){
    mut_ctype <- list()
    mut_ctype[[c_type]] <- read.csv(paste0(file_name_mut, ".tsv"),
                                    sep = "\t")
    
    colnames(mut_ctype[[c_type]]) <- gsub("\\.", "-", colnames(mut_ctype[[c_type]]))
    
    # Filter to only contain mutations occuring in >= 5% of all samples: 
    #num_cols <- ncol(mut_ctype[[c_type]]) - 1
    
    # Keep only top 10 most mutated genes: 
    mut_ctype[[c_type]] <- mut_ctype[[c_type]] %>% 
      mutate(count_ones = rowSums(select(., -sample) == 1)) %>% # >= (0.1*num_cols))
      arrange(desc(count_ones)) %>% 
      slice_head(n = 10) %>% 
      select(-count_ones) %>% 
      mutate(across(everything(), ~replace(., . ==  1 , "MUT"))) %>% 
      mutate(across(everything(), ~replace(., . ==  0 , "WT")))
    
    # Change format to be compatible with phenotype data: 
    mut_ctype[[c_type]] <- mut_ctype[[c_type]] %>% 
      rename(mut_gene = sample) %>% 
      pivot_longer(cols = -mut_gene,
                   names_to = "sample",
                   values_to = "mutation") %>% 
      pivot_wider(names_from = mut_gene,   # Convert gene names to separate columns
                  values_from = mutation, 
                  names_prefix = "mut_")
    
  } else if (!c_type %in% names(mut_ctype)){
    mut_ctype[[c_type]] <- read.csv(paste0(file_name_mut, ".tsv"),
                                    sep = "\t")
    
    colnames(mut_ctype[[c_type]]) <- gsub("\\.", "-", colnames(mut_ctype[[c_type]]))
    
    # Keep only top 10 most mutated genes: 
    mut_ctype[[c_type]] <- mut_ctype[[c_type]] %>% 
      mutate(count_ones = rowSums(select(., -sample) == 1)) %>% # >= (0.1*num_cols))
      arrange(desc(count_ones)) %>% 
      slice_head(n = 10) %>% 
      select(-count_ones) %>% 
      mutate(across(everything(), ~replace(., . ==  1 , "MUT"))) %>% 
      mutate(across(everything(), ~replace(., . ==  0 , "WT")))
      
    
    # Change format to be compatible with phenotype data: 
    mut_ctype[[c_type]] <- mut_ctype[[c_type]] %>% 
      rename(mut_gene = sample) %>% 
      pivot_longer(cols = -mut_gene,
                   names_to = "sample",
                   values_to = "mutation") %>% 
      pivot_wider(names_from = mut_gene,   # Convert gene names to separate columns
                  values_from = mutation, 
                  names_prefix = "mut_")
  }
  
  top10_mutations <- c(top10_mutations, colnames(mut_ctype[[c_type]]))
}

top10_mutations <- top10_mutations %>% unlist() %>%  unique() 
top10_mutations <- top10_mutations[-1]
top10_mutations <- gsub("mut_", "", top10_mutations)
```

```{r}
# Collect sample IDs in lists
sample_id_solidtumor <- list()
sample_id_laml_skcm <- list()

for (c_type in cancer_abbr_list){
   df_pheno_c_type <- df_pheno %>% 
    filter(cancer.type.abbreviation == c_type)
   
   # Filter sample ids to only include those of tumor tissue. For LAML: only PBMC. 
   # For Melanoma, both metastatic and tumor. 
   if (c_type == "LAML"){
     sample_id_laml_skcm[[c_type]] <- df_pheno_c_type %>% 
       filter(sample_type == "Primary Blood Derived Cancer - Peripheral Blood") %>%
       dplyr::select(sample)
     
   } else if(c_type == "SKCM"){
     sample_id_laml_skcm[["SKCM_tumor"]] <- df_pheno_c_type %>% 
       filter(sample_type == "Primary Tumor") %>%
       dplyr::select(sample)
     
     sample_id_laml_skcm[["SKCM_metastatic"]] <- df_pheno_c_type %>% 
       filter(sample_type == "Metastatic") %>%
       dplyr::select(sample)
     
   } else {
     sample_id_solidtumor[[c_type]] <- df_pheno_c_type %>% 
       filter(sample_type == "Primary Tumor") %>%
       dplyr::select(sample) 
   }
}
```

Seems like Limma and voom works best with raw counts or expected counts as input. <https://biostar.usegalaxy.org/p/10648/>.

```{r}
# Read expected counts
if (!exists("df_expected_count")){
  df_expected_count <- read_tsv(paste0(file_path_xenadata, "TCGA_pancan_expected_count_goi.tsv"), 
                                show_col_types = FALSE) %>% 
    mutate(across(-c(sample), function(x) 2^x)) # Reverse log2
}

# Filter samples out which are not in phenotype data
df_expected_count <- df_expected_count %>% 
  dplyr::select(sample, intersect(df_pheno$sample, colnames(df_expected_count)))

# Change gene IDs to gene names: 
geneName_ensg <- read_csv("C:/Users/Mette/OneDrive - Danmarks Tekniske Universitet/11. Semester Speciale/Data/targets_ensg.csv")
geneName_ensg <- geneName_ensg %>% 
  rename(gene_ensg_shrt = converted_alias) %>% 
  dplyr::select(name, gene_ensg_shrt)

df_expected_count <- df_expected_count %>% 
  mutate(gene_ensg_shrt = gsub("\\..*", "", sample)) %>% 
  select(-sample) %>% 
  relocate(gene_ensg_shrt) %>% 
  left_join(geneName_ensg, by = "gene_ensg_shrt") %>%
  rename(sample = name) %>% 
  relocate(sample) %>% 
  select(-gene_ensg_shrt)

mat_exp_count <-  df_expected_count %>% 
  column_to_rownames("sample") %>% 
  as.matrix()
```

## Limma workflow

(<https://www.bioconductor.org/packages/release/workflows/vignettes/RNAseq123/inst/doc/limmaWorkflow.html>)

<https://biocellgen-public.svi.edu.au/sahmri-bulk-rnaseq/processing.html#Questions>

### Setup DGEList object

```{r}
# Load in lib size (sum of gene counts (ALL GENES):
df_lib_size <- read.csv(paste0(file_path_xenadata, "lib_size.txt"), sep = "\t")

colnames(df_lib_size) <- c("sample", "lib_size")

c_type <- "PAAD"

# Exctract list of sample ids for the specific cancer type:
if (!c_type %in% c("SKCM", "SKCM_tumor", "SKCM_metastatic", "LAML")){
  sample_id_ctype <- sample_id_solidtumor[[c_type]] %>% 
    unlist(use.names = F) %>% 
    intersect(colnames(mat_exp_count))

} else if (c_type %in% c("SKCM_tumor", "SKCM_metastatic", "LAML")){
  sample_id_ctype <- sample_id_laml_skcm[[c_type]] %>% 
    unlist(use.names = F )%>% 
    intersect(colnames(mat_exp_count))
  
} else if (c_type == "SKCM"){
  sample_id_ctype <- c(sample_id_laml_skcm[["SKCM_tumor"]], sample_id_laml_skcm[["SKCM_metastatic"]]) %>% 
    unlist(use.names = F) %>% 
    intersect(colnames(mat_exp_count))
}

mat_exp_count_ctype <- mat_exp_count %>% 
  as.data.frame() %>% 
  select(sample_id_ctype) %>% 
  as.matrix()

# Make sure the samples appear in same order as for mat_exp_count_ctype
df_lib_size_ctype <- df_lib_size %>% 
  filter(sample %in% colnames(mat_exp_count_ctype)) %>% 
  arrange(match(sample, colnames(mat_exp_count_ctype))) 


# Common colnames in two phenotype dataframes: 
com_cols <- intersect(colnames(df_pheno), colnames(phenotype_ctype[[c_type]]))
rm_cols <- com_cols[com_cols != "sample"]

# Filter out samples that are not in expected count data:
# Add the extra ctype specific phenotype data: 
# Add mutation data for top 10 most mutated genes: 
df_pheno_2 <- df_pheno %>% 
  filter(sample %in% colnames(mat_exp_count_ctype)) %>% 
  select(-rm_cols) %>% 
  left_join(phenotype_ctype[[c_type]], by = "sample") %>% 
  left_join(mut_ctype[[c_type]], by = "sample")
  
# Change blank cells to NA
df_pheno_2[df_pheno_2 == ""] <- NA

# Remove columns only consisting of NAs: 
df_pheno_2 <- df_pheno_2 %>% 
  select_if(function(x) { sum (!is.na(x)) >0})

rownames(df_pheno_2) <- df_pheno_2$sample

# Create dge object: 
dge <- DGEList(counts = mat_exp_count_ctype, 
               samples = df_pheno_2,
               lib.size = df_lib_size_ctype$lib_size) %>% 
  calcNormFactors("TMM") # Normalizing gene expression distributions. See factors like: dge$samples$norm.factors


```

### **Principal component analysis (PCA)**

```{r}
#dge$samples$X_GENOMIC_ID_TCGA_PAAD_mutation_broad_gene
```

```{r}
# Plotting PCA


pca_analysis <- prcomp(t(cpm(dge, log=TRUE)))
summary(pca_analysis) 

ggbiplot::ggbiplot(pca_analysis, 
                   groups = dge$samples$mut_TP53, 
                   ellipse = TRUE,
                   var.axes = FALSE)

ggbiplot::ggbiplot(pca_analysis, 
                   groups = dge$samples$maximum_tumor_dimension, 
                   ellipse = FALSE,
                   var.axes = FALSE)

# age_at_initial_pathologic_diagnosis,anatomic_neoplasm_subdivision, gender, radiation_therapy, pathologic_stage, number_of_lymphnodes_positive_by_he, maximum_tumor_dimension, neoplasm_histologic_grade

#anatomic_neoplasm_subdivision
#pathologic_stage

#cpm(dge, log=TRUE) %>% as.data.frame()
```

### Differential expression analysis

Differential gene expression analysis is used to find genes that are significantly expressed in one group compared to another. limma-voom uses a moderated t-statistic, which has greater power than a normal t-test when applied to gene expression data. This is because the limma-voom t-statistic borrow information across genes for a gene expression dataset (using Bayesian statistics).

```{r}
rowSums(cpm(dge) > 1)

# Density plot og gene expression
dge %>% 
  cpm(log = TRUE) %>% 
  melt %>% 
  dplyr::filter(is.finite(value)) %>% 
  ggplot(aes(x = value, colour = Var2)) +
  geom_density() + 
  guides(colour = FALSE) +
  labs(x = "logCPM", y = "Density")
```

#### Specify Design Matrix

```{r}
# pathologic_stage
# Choosing here e.g. vital_status as group. 
dge$samples$mut_KRAS %>%  length()

#options(na.action='na.omit') # ignore NAs (default)
design_mat <- model.matrix(~0 + mut_KRAS, data=dge$samples)

# Remove some of the columns (discrepancy or no data)
#design_mat <- design_mat %>% 
#  as.data.frame() %>% 
#  select(mut_TP53NO, mut_TP53YES) %>% 
#  #filter_all(any_vars(.!=0)) %>% 
#  as.matrix()
  
```

#### Apply voom transformation

Voom transformation will transform the discrete counts of gene count data into log2-counts per million (logCPM). This also estimates the mean-variance relationship and uses this to compute appropriate observation-level weights (genes), while taking into account differences in library sizes between samples.

This step makes the data ready for linear modelling.

```{r}
# Filter dge object to only contain samples from design matrix (NAs removed);
# Get the sample names from the design matrix and dge object
design_samples <- rownames(design_mat)
# Filter the dge object to keep only the common samples
dge_filtered <- dge[, design_samples]


voomData <- voom(dge_filtered, design = design_mat, plot = TRUE)
```

We want it to be without low standard variations. Look at <https://stats.stackexchange.com/questions/160255/voom-mean-variance-trend-plot-how-to-interpret-the-plot> for reference.

#### Define Comparison (Contrast) of Interest

Here we define the contrast matrix, which contains the pairwise comparisons which we wish to test.

```{r}
design_mat_colnames <- colnames(design_mat)

contrasts_mat <- makeContrasts(
  levels = colnames(design_mat),
  mut_KRAS = mut_KRASMUT - mut_KRASWT
)
contrasts_mat
```

#### Fit a linear model for each gene

Now a linear model is fitted for each gene using the voomData logCPM for each gene, the design matrix and the contrast matrix.

`treat` applies Bayesian statistics to "borrow" information across the indiviual moderated t-test for each gene. This will increase the power to detect differentially expressed genes.

In the code here below we define a log2-fold change greater than 1 to be determining if a gene is differentially expressed.

```{r}
fit <- lmFit(voomData, design_mat) %>%
  contrasts.fit(contrasts_mat) %>%
  treat(lfc = 1) #lfc = 1 (default = 0.2630344)
```

#### Identifying differentially expressed genes

We will have to correct for multiple testing. A detail about multiple testing corrections can be found here: <https://physiology.med.cornell.edu/people/banfelder/qbio/resources_2008/1.5_GenespringMTC.pdf>.

Here we use false discovery rate (FDR) method for correction. And set the significance cutoff at 0.05. This means that only genes with FDR-adjusted p-values \< 0.05 AND absolute log2 fold change of 1 or above will be considered significantly differentially expressed.

```{r}
results <- decideTests(fit, 
                       p.value = 0.05,#1,#0.5,
                       adjust.method = "fdr") 

results %>% 
  summary()
```

#### Results

In order to extract out the differentially expressed genes, we use the `topTreat` function from limma. Each row is a gene and columns contain information about p-value, fdr-adjusted p-value (ajd.P.Val), t-statistic (t), log2 fold change (logFC) and more.

```{r}
allDEresults <- topTreat(fit, 
                         coef = "mut_KRAS", 
                         number = Inf, 
                         adjust.method = "fdr") %>%
  as.data.frame() 

# Filtering the result table to only contain the significantly differentially expressed, meaning the adjusted p-value < 0.05. and absolute log2 fold change is greater than 1. 
allDEresults <- allDEresults %>%
  dplyr::mutate(isSignificant = case_when(
    adj.P.Val < 0.05 & abs(logFC) > 1 ~ TRUE, 
    TRUE ~ FALSE # If conditions in the line above are not met, gene is not DE. 
  ))

sigDEresults <- allDEresults %>%
  dplyr::filter(isSignificant == TRUE)


allDEresults
sigDEresults
```

#### Volcano plot

I will skip this, because it makes no sense when I only use 14 genes.

#### Boxplot

Looking at the expression of

```{r}
expressionOf_genes <- dge %>% 
  cpm(log = TRUE) %>%
  as.data.frame %>%
  rownames_to_column("gene") %>%
  #dplyr::filter(gene == "CD177") %>%
  melt() %>%
  rename(sample = variable,
         logCPM = value) %>% 
  left_join(dge$samples, by = "sample")
s
expressionOf_genes

expressionOf_genes %>% 
  ggplot(aes(x=gene, y = logCPM, fill = mut_KRAS)) +
  geom_boxplot()

```

# OLD

### Gene expression data

```{r}
# Gene expression TPM data: 

if (load_tpm){
  # Load data: 
  if (!exists("df_data")){
    df_data <- read.csv(paste0(file_path_xenadata, file_name_geneexp), sep = "\t")
  }
  
  # Change format of colnames to have "-" instead of ".":
  colnames(df_data) <- gsub("\\.", "-", colnames(df_data))
  
  # Part into sub df with solid tumors, laml and skcm. 
  flat_sample_id_solidtumor <- intersect(list(unlist(flatten(sample_id_solidtumor), use.names = FALSE))[[1]], colnames(df_data))
  flat_sample_id_laml <- intersect(list(unlist(sample_id_laml_skcm[["LAML"]], use.names = FALSE))[[1]], colnames(df_data))
  
  df_solidtumor <- df_data %>% 
    dplyr::select(sample, all_of(flat_sample_id_solidtumor)) %>% 
    mutate(gene_ensg_shrt = gsub("\\..*", "", sample)) %>% 
    relocate(sample, gene_ensg_shrt)
  
  df_laml <- df_data %>% 
    dplyr::select(sample, all_of(flat_sample_id_laml)) %>% 
    mutate(gene_ensg_shrt = gsub("\\..*", "", sample)) %>% 
    relocate(sample, gene_ensg_shrt)
  
  
  df_skcm <- list()
  
  for (skcm_type in names(sample_id_laml_skcm[-1])){
    
    flat_sample_id_skcm <- intersect(unlist(sample_id_laml_skcm[[skcm_type]], use.names = FALSE), colnames(df_data))
    
    df_skcm[[skcm_type]] <- df_data %>% 
      dplyr::select(sample, all_of(flat_sample_id_skcm)) %>% 
      mutate(gene_ensg_shrt = gsub("\\..*", "", sample)) %>% 
      relocate(sample, gene_ensg_shrt)
  }
}

```

## Limma analysis

```{r}
# Looks like cpm and fpkm are better instead of TPM. Loading norm count PANCAN data:
### NB!!! I will might need to use FPKM instead, not sure if norm count is the same as CPM.. For now, I will just use this norm count data to build the quarto.

# https://bioconductor.org/packages/release/workflows/vignettes/RNAseq123/inst/doc/designmatrices.html

if (!exists("df_norm_data")){
  df_norm_data <- list()
  
  for (c_type in cancer_abbr_list){
    file_name <- paste0(file_path_xenadata, 
                        "/TCGA_", 
                        c_type, 
                        "_gene_expression_RNAseq_pancan_normalized.tsv")
    if(file.exists(file_name)){
      df_norm_data[[c_type]] <- read.csv(file_name, 
                                       sep = "\t")
    } else {
      warning(paste0("File not found: ", file_name))
    }
  }
}

```

```{r}
df_norm_ctype_data <- df_norm_data[[c_type]] %>% 
  filter(sample %in% target_list) 

df_norm_ctype_data_cpm <- df_norm_ctype_data %>% 
  mutate(across(-c(sample), function(x) 2^x)) %>% 
  column_to_rownames("sample") %>% 
  as.matrix() %>% 
  cpm(log = TRUE)

df_norm_ctype_data_cpm %>% 
  lmFit() %>% 
  eBayes(trend=TRUE)
```

## TCGA data

```{r}
library(TCGAbiolinks)
library(SummarizedExperiment)
```

```{r}
tcga_data_list <- list()

sample_type <- "Primary Tumor"

project_name <- paste0("TCGA-", c_type)
query <- GDCquery(project = project_name,
                  data.category = "Transcriptome Profiling",
                  data.type = "Gene Expression Quantification",
                  workflow.type = "STAR - Counts", 
                  sample.type = sample_type)

tcga_data_list[[c_type]] <- GDCdownload(query)
```
